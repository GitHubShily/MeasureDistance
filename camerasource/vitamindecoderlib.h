/****************************************************************************
**
** Namespace VITAMINDECODERLib generated by dumpcpp v5.6.0 using
** dumpcpp -nometaobject {70EDCF63-CA7E-4812-8528-DA1EA2FD53B6}
** from the type library C:\Users\ShiLei\Desktop\ActiveX_based_SDK\bin\VitaminCtrl\lib\VitaminCtrl.dll
**
****************************************************************************/

#ifndef QAX_DUMPCPP_VITAMINDECODERLIB_H
#define QAX_DUMPCPP_VITAMINDECODERLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef VITAMINDECODERLIB_EXPORT
#define VITAMINDECODERLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace VITAMINDECODERLib {

    enum EAVIRecordState {
        eAVINone                = 0,
        eAVIStop                = 1,
        eAVIRecord              = 2
    };

    enum EAudioCodecType {
        eAuCodecLow             = 1,
        eAuCodecMobile          = 2,
        eAuCodecStandard        = 3,
        eAuCodecStereo          = 4
    };

    enum EClickEventHandler {
        clickNone               = 0,
        clickHandleSelf         = 1,
        clickSendEvent          = 2,
        clickHandleSendEvent    = 3
    };

    enum EConnProtocol {
        eProtNone               = 0,
        eProtUDP                = 1,
        eProtTCP                = 2,
        eProtHTTP               = 3,
        eProtMulticast          = 4
    };

    enum EConnectionType {
        eConnVideo              = 1,
        eConnAudio              = 2
    };

    enum EControlButtonState {
        ebutDigitalZoom         = 1,
        ebutAVIConvert          = 2,
        ebutTalk                = 4,
        ebutRtspPlayStop        = 8,
        ebutPlayVolume          = 16,
        ebutMicVolume           = 32,
        ebutRtspSlider          = 64,
        ebutMP4Convert          = 128
    };

    enum EControlStatus {
        ctrlStopped             = 0,
        ctrlConnecting          = 1,
        ctrlRunning             = 2,
        ctrlDisconnecting       = 3,
        ctrlReConnecting        = 4,
        ctrlConnectionBroken    = 5
    };

    enum EControlType {
        eCtrlNoCtrlBar          = 0,
        eCtrlNormal             = 1,
        eCtrlMotion             = 2,
        eCtrlMaskEdit           = 4,
        eCtrlMaskEdit3D         = 5
    };

    enum EDBRecordEventType {
        eMDAlertWin1            = 1,
        eMDAlertWin2            = 2,
        eMDAlertWin3            = 4,
        eDILow1                 = 256,
        eDILow2                 = 512,
        eDILow3                 = 1024,
        eDILow4                 = 2048,
        eDIHigh1                = 65536,
        eDIHigh2                = 131072,
        eDIHigh3                = 262144,
        eDIHigh4                = 524288,
        eDIRise1                = 2097152,
        eDIRise2                = 4194304,
        eDIRise3                = 8388608,
        eDIRise4                = 16777216,
        eDIFall1                = 33554432,
        eDIFall2                = 67108864,
        eDIFall3                = 134217728,
        eDIFall4                = 268435456
    };

    enum EDBStatusCode {
        eStatusDiskFull         = 1,
        eStatusDBRepairFinish   = 2,
        eStatusLocRepairFinish  = 3,
        eStatusNeedRepair       = 4,
        eStatusRecordStart      = 5,
        eStatusRecordStop       = 6,
        eStatusSizeLimited      = 7
    };

    enum EDisplayTimeFormat {
        eTimeFmtNormal          = 0,
        eTimeFmtTwelves         = 1,
        eTimeFmtUser            = 2
    };

    enum EDualStreamOption {
        eStream1                = 0,
        eStream2                = 1,
        eStream3                = 2,
        eStream4                = 3,
        eStreamLast             = 3
    };

    enum EFishEyeControl {
        eFishEyeCtrlFirst       = 0,
        eFishEyeCtrlAutoPan     = 0,
        eFishEyeCtrlPan         = 1,
        eFishEyeCtrlTilt        = 2,
        eFishEyeCtrlZoom        = 3,
        eFishEyeCtrlHome        = 4,
        eFishEyeCtrlRotate      = 5
    };

    enum EFishEyeMountType {
        eFishEyeMountTypeFirst  = 0,
        eFishEyeMountType_Wall  = 0,
        eFishEyeMountType_Ceiling= 1,
        eFishEyeMountType_Floor = 2
    };

    enum EFishEyePresentMode {
        eFishEyeModeFirst       = 0,
        eFishEyeModeSingleSourceStretch= 0,
        eFishEyeModeSingleSourceConstrainprop= 1,
        eFishEyeModeSinglePerspectView= 2,
        eFishEyeModeSinglePanoramaView= 3,
        eFishEyeModeDoubleSourcePerspect= 4,
        eFishEyeModeDouble      = 5,
        eFishEyeModeTriple      = 6,
        eFishEyeModeQuadWithSoucreConstrainprop= 7,
        eFishEyeModeQuadPerspectView= 8,
        eFishEyeModeQuadPerspectViewInterfered= 9,
        eFishEyeModeQuadWithPanoramaView= 10,
        eFishEyeModeNine        = 11
    };

    enum EFontStyle {
        eFontStyleRegular       = 0,
        eFontStyleBold          = 1,
        eFontStyleItalic        = 2,
        eFontStyleBoldItalic    = 3,
        eFontStyleUnderline     = 4,
        eFontStyleStrikeout     = 8
    };

    enum EHttpProxyType {
        eHttpProxyNone          = 0,
        eHttpProxySet           = 1,
        eHttpProxyIE            = 2
    };

    enum EMediaType {
        eMediaNone              = 0,
        eMediaVideo             = 1,
        eMediaAudio             = 2,
        eMediaAV                = 3
    };

    enum EPTZEnableFlag {
        eptzPTZOnOff            = 1,
        eptzPTZBuiltIn          = 2,
        eptzPTZPan              = 4,
        eptzPTZTilt             = 8,
        eptzPTZZoom             = 16,
        eptzPTZFocus            = 32
    };

    enum EPanelBtnStyle {
        eBtnAuto                = 0,
        eBtnPauseStop           = 1,
        eBtnStopOnly            = 2
    };

    enum EPictureFormat {
        ePicFmtJpeg             = 1,
        ePicFmtBmp              = 2,
        ePicFmtYUY2             = 3,
        ePicFmtRaw24            = 4,
        ePicFmtIYUV             = 5,
        ePicFmtYV12             = 6
    };

    enum ERegistryRoot {
        eRegLocalMachine        = 0,
        eRegCurrentUser         = 1
    };

    enum ERtspState {
        eRtspStateNone          = 0,
        eRtspStatePlayBefore    = 1,
        eRtspStatePlay          = 2,
        eRtspStatePause         = 3
    };

    enum EServerConfig {
        eCfgSystemResetSystem   = 0,
        eCfgSystemSerialNumber  = 2,
        eCfgSystemCurrentDate   = 3,
        eCfgSystemCurrentTime   = 4,
        eCfgSystemFirmwareVersion= 6,
        eCfgSystemPTZEnable1    = 8,
        eCfgSystemUserName      = 14,
        eCfgSystemUserPwssword  = 15,
        eCfgVideoCaptionText    = 101
    };

    enum EServerModelType {
        esrv2KServer            = 0,
        esrv3KServer            = 1,
        esrv456KServer          = 2,
        esrv7KServer            = 3,
        esrv2KServer4Ch         = 4,
        esrv7KDualStream        = 5,
        esrvDualStream          = 5,
        esrvMultipleStream      = 6
    };

    enum ESpeedType {
        ePanSpeed               = 1,
        eTiltSpeed              = 2,
        eZoomSpeed              = 3,
        eFocusSpeed             = 4,
        eAutoPanPatrolSpeed     = 5
    };

    enum EStreamingOption {
        eStOpStreaming          = 1,
        eStOpSingleJpeg         = 2
    };

    enum ETalkBtnStyle {
        eTalkBtnToggle          = 1,
        eTalkBtnPush            = 2
    };

    enum ETalkStatus {
        eTalking                = 1,
        eNonTalking             = 2
    };

    enum EVideoCodecType {
        eViCodecMJpeg           = 1,
        eViCodecSP              = 2,
        eViCodecSHM             = 3,
        eViCodecH264            = 4
    };

    enum EVideoQuality2K {
        evqua2KMedium           = 1,
        evqua2KStandard         = 2,
        evqua2KGood             = 3,
        evqua2KDetailed         = 4,
        evqua2KExcellent        = 5
    };

    enum EVideoSignalState {
        eVideoSignalOff         = 0,
        eVideoSignalOn          = 1
    };

    enum EVideoSize2K {
        evsz2KHalf              = 1,
        evsz2KNormal            = 2,
        evsz2KDouble            = 3
    };

// forward declarations
    enum EAVIRecordState;
    enum EServerModelType;
    enum EVideoSignalState;
    enum EConnectionType;
    enum ETalkStatus;
    enum EVideoCodecType;
    enum EConnProtocol;
    enum ERtspState;
    enum EClickEventHandler;
    enum EDisplayTimeFormat;
    enum EControlType;
    enum EPanelBtnStyle;
    enum EDualStreamOption;
    enum EHttpProxyType;
    enum EMediaType;
    enum ETalkBtnStyle;
    enum EVideoSize2K;
    enum EVideoQuality2K;
    enum EPictureFormat;
    enum EAudioCodecType;
    enum EStreamingOption;
    enum ERegistryRoot;
    enum EControlStatus;
    enum ESpeedType;
    enum EDBRecordEventType;
    enum EDBStatusCode;
    enum EPTZEnableFlag;
    enum EServerConfig;
    enum EControlButtonState;
    enum EFontStyle;
    enum EFishEyePresentMode;
    enum EFishEyeMountType;
    enum EFishEyeControl;
    enum EAVIRecordState;
    enum EServerModelType;
    enum EVideoSignalState;
    enum EConnectionType;
    enum ETalkStatus;
    enum EVideoCodecType;
    enum EConnProtocol;
    enum ERtspState;
    enum EClickEventHandler;
    enum EDisplayTimeFormat;
    enum EControlType;
    enum EPanelBtnStyle;
    enum EDualStreamOption;
    enum EHttpProxyType;
    enum EMediaType;
    enum ETalkBtnStyle;
    enum EVideoSize2K;
    enum EVideoQuality2K;
    enum EPictureFormat;
    enum EAudioCodecType;
    enum EStreamingOption;
    enum ERegistryRoot;
    enum EControlStatus;
    enum ESpeedType;
    enum EDBRecordEventType;
    enum EDBStatusCode;
    enum EPTZEnableFlag;
    enum EServerConfig;
    enum EControlButtonState;
    enum EFontStyle;
    enum EFishEyePresentMode;
    enum EFishEyeMountType;
    enum EFishEyeControl;

// skipping event interface _IVitaminCtrlEvents

class VITAMINDECODERLIB_EXPORT IVitaminCtrl : public QAxObject
{
public:
    IVitaminCtrl(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AVIFilePathName

    property AVIFilePathName

    */
    inline QString AVIFilePathName() const; //Returns the value of AVIFilePathName
    inline void SetAVIFilePathName(const QString& value); //Sets the value of the AVIFilePathName property

    /*
    Property AVIManualNaming

    property AVIManualNaming

    */
    inline bool AVIManualNaming() const; //Returns the value of AVIManualNaming
    inline void SetAVIManualNaming(bool value); //Sets the value of the AVIManualNaming property

    /*
    Property AVIMaxFileSize

    property AVIMaxFileSize

    */
    inline int AVIMaxFileSize() const; //Returns the value of AVIMaxFileSize
    inline void SetAVIMaxFileSize(int value); //Sets the value of the AVIMaxFileSize property

    /*
    Property AVIMaxFileTimeLength

    property AVIMaxFileTimeLength

    */
    inline int AVIMaxFileTimeLength() const; //Returns the value of AVIMaxFileTimeLength
    inline void SetAVIMaxFileTimeLength(int value); //Sets the value of the AVIMaxFileTimeLength property

    /*
    Property AVIPath

    property AVIPath

    */
    inline QString AVIPath() const; //Returns the value of AVIPath
    inline void SetAVIPath(const QString& value); //Sets the value of the AVIPath property

    /*
    Property AVIRecordTimeout

    property AVIRecordTimeout

    */
    inline int AVIRecordTimeout() const; //Returns the value of AVIRecordTimeout
    inline void SetAVIRecordTimeout(int value); //Sets the value of the AVIRecordTimeout property

    /*
    Property AVIStatus

    property AVIStatus

    */
    inline VITAMINDECODERLib::EAVIRecordState AVIStatus() const; //Returns the value of AVIStatus

    /*
    Property AVIVideoFrameRate

    property AVIVideoFrameRate

    */
    inline int AVIVideoFrameRate() const; //Returns the value of AVIVideoFrameRate
    inline void SetAVIVideoFrameRate(int value); //Sets the value of the AVIVideoFrameRate property

    /*
    Property AVIVideoHeight

    property AVIVideoHeight

    */
    inline int AVIVideoHeight() const; //Returns the value of AVIVideoHeight
    inline void SetAVIVideoHeight(int value); //Sets the value of the AVIVideoHeight property

    /*
    Property AVIVideoSizeByStream

    property AVIVideoSizeByStream

    */
    inline bool AVIVideoSizeByStream() const; //Returns the value of AVIVideoSizeByStream
    inline void SetAVIVideoSizeByStream(bool value); //Sets the value of the AVIVideoSizeByStream property

    /*
    Property AVIVideoWidth

    property AVIVideoWidth

    */
    inline int AVIVideoWidth() const; //Returns the value of AVIVideoWidth
    inline void SetAVIVideoWidth(int value); //Sets the value of the AVIVideoWidth property

    /*
    Property AntiTearing

    property AntiTearing

    */
    inline bool AntiTearing() const; //Returns the value of AntiTearing
    inline void SetAntiTearing(bool value); //Sets the value of the AntiTearing property

    /*
    Property AudioBitRate

    property AudioBitRate

    */
    inline int AudioBitRate() const; //Returns the value of AudioBitRate

    /*
    Property AutoAVISettings

    property AutoAVISettings

    */
    inline bool AutoAVISettings() const; //Returns the value of AutoAVISettings
    inline void SetAutoAVISettings(bool value); //Sets the value of the AutoAVISettings property

    /*
    Property AutoReconnect

    property AutoReconnect

    */
    inline bool AutoReconnect() const; //Returns the value of AutoReconnect
    inline void SetAutoReconnect(bool value); //Sets the value of the AutoReconnect property

    /*
    Property AutoServerModelType

    property AutoServerModelType

    */
    inline bool AutoServerModelType() const; //Returns the value of AutoServerModelType
    inline void SetAutoServerModelType(bool value); //Sets the value of the AutoServerModelType property

    /*
    Property AutoStartConnection

    property AutoStartConnection

    */
    inline bool AutoStartConnection() const; //Returns the value of AutoStartConnection
    inline void SetAutoStartConnection(bool value); //Sets the value of the AutoStartConnection property

    /*
    Property BeRightClickEventHandler

    property BeRightClickEventHandler

    */
    inline bool BeRightClickEventHandler() const; //Returns the value of BeRightClickEventHandler
    inline void SetBeRightClickEventHandler(bool value); //Sets the value of the BeRightClickEventHandler property

    /*
    Property BitmapFile

    property BitmapFile

    */
    inline QString BitmapFile() const; //Returns the value of BitmapFile
    inline void SetBitmapFile(const QString& value); //Sets the value of the BitmapFile property

    /*
    Property ChangePresentMode

    property ChangePresentMode

    */
    inline VITAMINDECODERLib::EFishEyePresentMode ChangePresentMode() const; //Returns the value of ChangePresentMode
    inline void SetChangePresentMode(VITAMINDECODERLib::EFishEyePresentMode value); //Sets the value of the ChangePresentMode property

    /*
    Property CircularMode

    property CircularMode

    */
    inline bool CircularMode() const; //Returns the value of CircularMode
    inline void SetCircularMode(bool value); //Sets the value of the CircularMode property

    /*
    Property ClickEventHandler

    property ClickEventHandler

    */
    inline VITAMINDECODERLib::EClickEventHandler ClickEventHandler() const; //Returns the value of ClickEventHandler
    inline void SetClickEventHandler(VITAMINDECODERLib::EClickEventHandler value); //Sets the value of the ClickEventHandler property

    /*
    Property ConnectionProtocol

    property ConnectionProtocol

    */
    inline VITAMINDECODERLib::EConnProtocol ConnectionProtocol() const; //Returns the value of ConnectionProtocol
    inline void SetConnectionProtocol(VITAMINDECODERLib::EConnProtocol value); //Sets the value of the ConnectionProtocol property

    /*
    Property ConnectionTimeout

    property ConnectionTimeout

    */
    inline int ConnectionTimeout() const; //Returns the value of ConnectionTimeout
    inline void SetConnectionTimeout(int value); //Sets the value of the ConnectionTimeout property

    /*
    Property ControlButtonOpts

    property ControlButtonOpts

    */
    inline int ControlButtonOpts() const; //Returns the value of ControlButtonOpts
    inline void SetControlButtonOpts(int value); //Sets the value of the ControlButtonOpts property

    /*
    Property ControlID

    property ControlID

    */
    inline int ControlID() const; //Returns the value of ControlID
    inline void SetControlID(int value); //Sets the value of the ControlID property

    /*
    Property ControlPort

    property ControlPort

    */
    inline int ControlPort() const; //Returns the value of ControlPort
    inline void SetControlPort(int value); //Sets the value of the ControlPort property

    /*
    Property ControlStatus

    property ControlStatus

    */
    inline VITAMINDECODERLib::EControlStatus ControlStatus() const; //Returns the value of ControlStatus

    /*
    Property ControlType

    property ControlType

    */
    inline VITAMINDECODERLib::EControlType ControlType() const; //Returns the value of ControlType
    inline void SetControlType(VITAMINDECODERLib::EControlType value); //Sets the value of the ControlType property

    /*
    Property ControlVersion

    property ControlVersion

    */
    inline QString ControlVersion() const; //Returns the value of ControlVersion

    /*
    Property CurrentAudioCodecType

    property CurrentAudioCodecType

    */
    inline VITAMINDECODERLib::EAudioCodecType CurrentAudioCodecType() const; //Returns the value of CurrentAudioCodecType

    /*
    Property CurrentAudioPort

    property CurrentAudioPort

    */
    inline int CurrentAudioPort() const; //Returns the value of CurrentAudioPort

    /*
    Property CurrentControlCam

    property CurrentControlCam

    */
    inline int CurrentControlCam() const; //Returns the value of CurrentControlCam
    inline void SetCurrentControlCam(int value); //Sets the value of the CurrentControlCam property

    /*
    Property CurrentMediaType

    property CurrentMediaType

    */
    inline VITAMINDECODERLib::EMediaType CurrentMediaType() const; //Returns the value of CurrentMediaType

    /*
    Property CurrentProtocol

    property CurrentProtocol

    */
    inline VITAMINDECODERLib::EConnProtocol CurrentProtocol() const; //Returns the value of CurrentProtocol

    /*
    Property CurrentVideoCodecType

    property CurrentVideoCodecType

    */
    inline VITAMINDECODERLib::EVideoCodecType CurrentVideoCodecType() const; //Returns the value of CurrentVideoCodecType

    /*
    Property CurrentVideoPort

    property CurrentVideoPort

    */
    inline int CurrentVideoPort() const; //Returns the value of CurrentVideoPort

    /*
    Property DBHierarchy

    property DBHierarchy

    */
    inline bool DBHierarchy() const; //Returns the value of DBHierarchy
    inline void SetDBHierarchy(bool value); //Sets the value of the DBHierarchy property

    /*
    Property DDrawOnePass

    property DDrawOnePass

    */
    inline bool DDrawOnePass() const; //Returns the value of DDrawOnePass
    inline void SetDDrawOnePass(bool value); //Sets the value of the DDrawOnePass property

    /*
    Property DarwinConnection

    property DarwinConnection

    */
    inline bool DarwinConnection() const; //Returns the value of DarwinConnection
    inline void SetDarwinConnection(bool value); //Sets the value of the DarwinConnection property

    /*
    Property DarwinExtraPath

    property DarwinExtraPath

    */
    inline QString DarwinExtraPath() const; //Returns the value of DarwinExtraPath
    inline void SetDarwinExtraPath(const QString& value); //Sets the value of the DarwinExtraPath property

    /*
    Property DatabasePath

    property DatabasePath

    */
    inline QString DatabasePath() const; //Returns the value of DatabasePath

    /*
    Property Deblocking

    property Deblocking

    */
    inline bool Deblocking() const; //Returns the value of Deblocking
    inline void SetDeblocking(bool value); //Sets the value of the Deblocking property

    /*
    Property DecodeAV

    property DecodeAV

    */
    inline bool DecodeAV() const; //Returns the value of DecodeAV
    inline void SetDecodeAV(bool value); //Sets the value of the DecodeAV property

    /*
    Property DecodeSnapshot

    property DecodeSnapshot

    */
    inline bool DecodeSnapshot() const; //Returns the value of DecodeSnapshot
    inline void SetDecodeSnapshot(bool value); //Sets the value of the DecodeSnapshot property

    /*
    Property Deinterlace

    property Deinterlace

    */
    inline bool Deinterlace() const; //Returns the value of Deinterlace
    inline void SetDeinterlace(bool value); //Sets the value of the Deinterlace property

    /*
    Property DigitalInURL

    property DigitalInURL

    */
    inline QString DigitalInURL() const; //Returns the value of DigitalInURL
    inline void SetDigitalInURL(const QString& value); //Sets the value of the DigitalInURL property

    /*
    Property DigitalOutURL

    property DigitalOutURL

    */
    inline QString DigitalOutURL() const; //Returns the value of DigitalOutURL
    inline void SetDigitalOutURL(const QString& value); //Sets the value of the DigitalOutURL property

    /*
    Property DigitalZoomEnableChk

    property DigitalZoomEnableChk

    */
    inline bool DigitalZoomEnableChk() const; //Returns the value of DigitalZoomEnableChk
    inline void SetDigitalZoomEnableChk(bool value); //Sets the value of the DigitalZoomEnableChk property

    /*
    Property DigitalZoomEnabled

    property DigitalZoomEnabled

    */
    inline bool DigitalZoomEnabled() const; //Returns the value of DigitalZoomEnabled
    inline void SetDigitalZoomEnabled(bool value); //Sets the value of the DigitalZoomEnabled property

    /*
    Property DigitalZoomFactor

    property DigitalZoomFactor

    */
    inline int DigitalZoomFactor() const; //Returns the value of DigitalZoomFactor
    inline void SetDigitalZoomFactor(int value); //Sets the value of the DigitalZoomFactor property

    /*
    Property DigitalZoomX

    property DigitalZoomX

    */
    inline int DigitalZoomX() const; //Returns the value of DigitalZoomX
    inline void SetDigitalZoomX(int value); //Sets the value of the DigitalZoomX property

    /*
    Property DigitalZoomY

    property DigitalZoomY

    */
    inline int DigitalZoomY() const; //Returns the value of DigitalZoomY
    inline void SetDigitalZoomY(int value); //Sets the value of the DigitalZoomY property

    /*
    Property Display

    property Display

    */
    inline bool Display() const; //Returns the value of Display
    inline void SetDisplay(bool value); //Sets the value of the Display property

    /*
    Property DisplayErrorMsg

    property DisplayErrorMsg

    */
    inline bool DisplayErrorMsg() const; //Returns the value of DisplayErrorMsg
    inline void SetDisplayErrorMsg(bool value); //Sets the value of the DisplayErrorMsg property

    /*
    Property DisplayLastImage

    property DisplayLastImage

    */
    inline bool DisplayLastImage() const; //Returns the value of DisplayLastImage
    inline void SetDisplayLastImage(bool value); //Sets the value of the DisplayLastImage property

    /*
    Property DisplayMotionFrame

    property DisplayMotionFrame

    */
    inline bool DisplayMotionFrame() const; //Returns the value of DisplayMotionFrame
    inline void SetDisplayMotionFrame(bool value); //Sets the value of the DisplayMotionFrame property

    /*
    Property DisplayPeriod

    property DisplayPeriod

    */
    inline int DisplayPeriod() const; //Returns the value of DisplayPeriod
    inline void SetDisplayPeriod(int value); //Sets the value of the DisplayPeriod property

    /*
    Property DisplayTimeFormat

    property DisplayTimeFormat

    */
    inline VITAMINDECODERLib::EDisplayTimeFormat DisplayTimeFormat() const; //Returns the value of DisplayTimeFormat
    inline void SetDisplayTimeFormat(VITAMINDECODERLib::EDisplayTimeFormat value); //Sets the value of the DisplayTimeFormat property

    /*
    Property DrawHwnd

    property DrawHwnd

    */
    inline int DrawHwnd() const; //Returns the value of DrawHwnd
    inline void SetDrawHwnd(int value); //Sets the value of the DrawHwnd property

    /*
    Property EffectiveModelType

    property EffectiveModelType

    */
    inline VITAMINDECODERLib::EServerModelType EffectiveModelType() const; //Returns the value of EffectiveModelType

    /*
    Property EnableFishEye

    property EnableFishEye

    */
    inline bool EnableFishEye() const; //Returns the value of EnableFishEye
    inline void SetEnableFishEye(bool value); //Sets the value of the EnableFishEye property

    /*
    Property EnableJoystick

    property EnableJoystick

    */
    inline bool EnableJoystick() const; //Returns the value of EnableJoystick
    inline void SetEnableJoystick(bool value); //Sets the value of the EnableJoystick property

    /*
    Property EnableMD

    property EnableMD

    */
    inline bool EnableMD() const; //Returns the value of EnableMD
    inline void SetEnableMD(bool value); //Sets the value of the EnableMD property

    /*
    Property EnableMuteWhenTalk

    property EnableMuteWhenTalk

    */
    inline bool EnableMuteWhenTalk() const; //Returns the value of EnableMuteWhenTalk
    inline void SetEnableMuteWhenTalk(bool value); //Sets the value of the EnableMuteWhenTalk property

    /*
    Property EnableRTSPProxy

    property EnableRTSPProxy

    */
    inline bool EnableRTSPProxy() const; //Returns the value of EnableRTSPProxy
    inline void SetEnableRTSPProxy(bool value); //Sets the value of the EnableRTSPProxy property

    /*
    Property EnableRecordingTime

    property EnableRecordingTime

    */
    inline bool EnableRecordingTime() const; //Returns the value of EnableRecordingTime
    inline void SetEnableRecordingTime(bool value); //Sets the value of the EnableRecordingTime property

    /*
    Property EnableSSL

    property EnableSSL

    */
    inline bool EnableSSL() const; //Returns the value of EnableSSL
    inline void SetEnableSSL(bool value); //Sets the value of the EnableSSL property

    /*
    Property EnableTwoWayAudio

    property EnableTwoWayAudio

    */
    inline bool EnableTwoWayAudio() const; //Returns the value of EnableTwoWayAudio
    inline void SetEnableTwoWayAudio(bool value); //Sets the value of the EnableTwoWayAudio property

    /*
    Property EventTypes

    property EventTypes

    */
    inline int EventTypes() const; //Returns the value of EventTypes
    inline void SetEventTypes(int value); //Sets the value of the EventTypes property

    /*
    Property FileNameOfTime

    property FileNameOfTime

    */
    inline bool FileNameOfTime() const; //Returns the value of FileNameOfTime
    inline void SetFileNameOfTime(bool value); //Sets the value of the FileNameOfTime property

    /*
    Property FishEyeAspectRatioHeight

    property FishEyeAspectRatioHeight

    */
    inline int FishEyeAspectRatioHeight() const; //Returns the value of FishEyeAspectRatioHeight
    inline void SetFishEyeAspectRatioHeight(int value); //Sets the value of the FishEyeAspectRatioHeight property

    /*
    Property FishEyeAspectRatioWidth

    property FishEyeAspectRatioWidth

    */
    inline int FishEyeAspectRatioWidth() const; //Returns the value of FishEyeAspectRatioWidth
    inline void SetFishEyeAspectRatioWidth(int value); //Sets the value of the FishEyeAspectRatioWidth property

    /*
    Property FishEyeInitLocationInfo

    property FishEyeInitLocationInfo

    */
    inline QString FishEyeInitLocationInfo() const; //Returns the value of FishEyeInitLocationInfo
    inline void SetFishEyeInitLocationInfo(const QString& value); //Sets the value of the FishEyeInitLocationInfo property

    /*
    Property FishEyeMountType

    property FishEyeMountType

    */
    inline VITAMINDECODERLib::EFishEyeMountType FishEyeMountType() const; //Returns the value of FishEyeMountType
    inline void SetFishEyeMountType(VITAMINDECODERLib::EFishEyeMountType value); //Sets the value of the FishEyeMountType property

    /*
    Property FlipMaskWnd

    property FlipMaskWnd

    */
    inline bool FlipMaskWnd() const; //Returns the value of FlipMaskWnd
    inline void SetFlipMaskWnd(bool value); //Sets the value of the FlipMaskWnd property

    /*
    Property ForceGDI

    property ForceGDI

    */
    inline bool ForceGDI() const; //Returns the value of ForceGDI
    inline void SetForceGDI(bool value); //Sets the value of the ForceGDI property

    /*
    Property ForceNonYUV

    property ForceNonYUV

    */
    inline bool ForceNonYUV() const; //Returns the value of ForceNonYUV
    inline void SetForceNonYUV(bool value); //Sets the value of the ForceNonYUV property

    /*
    Property FrameRate

    property FrameRate

    */
    inline int FrameRate() const; //Returns the value of FrameRate

    /*
    Property GDIUseStretchBlt

    property GDIUseStretchBlt

    */
    inline bool GDIUseStretchBlt() const; //Returns the value of GDIUseStretchBlt
    inline void SetGDIUseStretchBlt(bool value); //Sets the value of the GDIUseStretchBlt property

    /*
    Property GetMD

    property GetMD

    */
    inline QString GetMD() const; //Returns the value of GetMD
    inline void SetGetMD(const QString& value); //Sets the value of the GetMD property

    /*
    Property GetMDParmUrl

    property GetMDParmUrl

    */
    inline QString GetMDParmUrl() const; //Returns the value of GetMDParmUrl
    inline void SetGetMDParmUrl(const QString& value); //Sets the value of the GetMDParmUrl property

    /*
    Property GetMaskEditParmUrl

    property GetMaskEditParmUrl

    */
    inline QString GetMaskEditParmUrl() const; //Returns the value of GetMaskEditParmUrl
    inline void SetGetMaskEditParmUrl(const QString& value); //Sets the value of the GetMaskEditParmUrl property

    /*
    Property HTTPProxyAddress

    property HTTPProxyAddress

    */
    inline QString HTTPProxyAddress() const; //Returns the value of HTTPProxyAddress
    inline void SetHTTPProxyAddress(const QString& value); //Sets the value of the HTTPProxyAddress property

    /*
    Property HTTPProxyPassword

    property HTTPProxyPassword

    */
    inline QString HTTPProxyPassword() const; //Returns the value of HTTPProxyPassword
    inline void SetHTTPProxyPassword(const QString& value); //Sets the value of the HTTPProxyPassword property

    /*
    Property HTTPProxyPort

    property HTTPProxyPort

    */
    inline int HTTPProxyPort() const; //Returns the value of HTTPProxyPort
    inline void SetHTTPProxyPort(int value); //Sets the value of the HTTPProxyPort property

    /*
    Property HTTPProxyType

    property HTTPProxyType

    */
    inline VITAMINDECODERLib::EHttpProxyType HTTPProxyType() const; //Returns the value of HTTPProxyType
    inline void SetHTTPProxyType(VITAMINDECODERLib::EHttpProxyType value); //Sets the value of the HTTPProxyType property

    /*
    Property HTTPProxyUserName

    property HTTPProxyUserName

    */
    inline QString HTTPProxyUserName() const; //Returns the value of HTTPProxyUserName
    inline void SetHTTPProxyUserName(const QString& value); //Sets the value of the HTTPProxyUserName property

    /*
    Property HideConnectIP

    property HideConnectIP

    */
    inline bool HideConnectIP() const; //Returns the value of HideConnectIP
    inline void SetHideConnectIP(bool value); //Sets the value of the HideConnectIP property

    /*
    Property HttpPort

    property HttpPort

    */
    inline int HttpPort() const; //Returns the value of HttpPort
    inline void SetHttpPort(int value); //Sets the value of the HttpPort property

    /*
    Property IgnoreBorder

    property IgnoreBorder

    */
    inline bool IgnoreBorder() const; //Returns the value of IgnoreBorder
    inline void SetIgnoreBorder(bool value); //Sets the value of the IgnoreBorder property

    /*
    Property IgnoreCaption

    property IgnoreCaption

    */
    inline bool IgnoreCaption() const; //Returns the value of IgnoreCaption
    inline void SetIgnoreCaption(bool value); //Sets the value of the IgnoreCaption property

    /*
    Property IgnoreSSLCertificate

    property IgnoreSSLCertificate

    */
    inline bool IgnoreSSLCertificate() const; //Returns the value of IgnoreSSLCertificate
    inline void SetIgnoreSSLCertificate(bool value); //Sets the value of the IgnoreSSLCertificate property

    /*
    Property IndexSize

    property IndexSize

    */
    inline int IndexSize() const; //Returns the value of IndexSize
    inline void SetIndexSize(int value); //Sets the value of the IndexSize property

    /*
    Property IsRecording

    property IsRecording

    */
    inline bool IsRecording() const; //Returns the value of IsRecording

    /*
    Property JoystickPanSpeedLvs

    property JoystickPanSpeedLvs

    */
    inline int JoystickPanSpeedLvs() const; //Returns the value of JoystickPanSpeedLvs
    inline void SetJoystickPanSpeedLvs(int value); //Sets the value of the JoystickPanSpeedLvs property

    /*
    Property JoystickSpeedLvs

    property JoystickSpeedLvs

    */
    inline int JoystickSpeedLvs() const; //Returns the value of JoystickSpeedLvs
    inline void SetJoystickSpeedLvs(int value); //Sets the value of the JoystickSpeedLvs property

    /*
    Property JoystickSpeedPercentage

    property JoystickSpeedPercentage

    */
    inline int JoystickSpeedPercentage() const; //Returns the value of JoystickSpeedPercentage
    inline void SetJoystickSpeedPercentage(int value); //Sets the value of the JoystickSpeedPercentage property

    /*
    Property JoystickTiltSpeedLvs

    property JoystickTiltSpeedLvs

    */
    inline int JoystickTiltSpeedLvs() const; //Returns the value of JoystickTiltSpeedLvs
    inline void SetJoystickTiltSpeedLvs(int value); //Sets the value of the JoystickTiltSpeedLvs property

    /*
    Property JoystickZoomSpeedLvs

    property JoystickZoomSpeedLvs

    */
    inline int JoystickZoomSpeedLvs() const; //Returns the value of JoystickZoomSpeedLvs
    inline void SetJoystickZoomSpeedLvs(int value); //Sets the value of the JoystickZoomSpeedLvs property

    /*
    Property JpegQuality

    property JpegQuality

    */
    inline int JpegQuality() const; //Returns the value of JpegQuality
    inline void SetJpegQuality(int value); //Sets the value of the JpegQuality property

    /*
    Property JpegSecsPerFrame

    property JpegSecsPerFrame

    */
    inline int JpegSecsPerFrame() const; //Returns the value of JpegSecsPerFrame
    inline void SetJpegSecsPerFrame(int value); //Sets the value of the JpegSecsPerFrame property

    /*
    Property JpegURL

    property JpegURL

    */
    inline QString JpegURL() const; //Returns the value of JpegURL
    inline void SetJpegURL(const QString& value); //Sets the value of the JpegURL property

    /*
    Property Language

    property Language

    */
    inline QString Language() const; //Returns the value of Language
    inline void SetLanguage(const QString& value); //Sets the value of the Language property

    /*
    Property LeftTitleSpace

    property LeftTitleSpace

    */
    inline int LeftTitleSpace() const; //Returns the value of LeftTitleSpace
    inline void SetLeftTitleSpace(int value); //Sets the value of the LeftTitleSpace property

    /*
    Property Location

    property Location

    */
    inline QString Location() const; //Returns the value of Location

    /*
    Property MDEditMode

    property MDEditMode

    */
    inline bool MDEditMode() const; //Returns the value of MDEditMode
    inline void SetMDEditMode(bool value); //Sets the value of the MDEditMode property

    /*
    Property MP4Conversion

    property MP4Conversion

    */
    inline bool MP4Conversion() const; //Returns the value of MP4Conversion
    inline void SetMP4Conversion(bool value); //Sets the value of the MP4Conversion property

    /*
    Property MP4MaxFileSize

    property MP4MaxFileSize

    */
    inline int MP4MaxFileSize() const; //Returns the value of MP4MaxFileSize
    inline void SetMP4MaxFileSize(int value); //Sets the value of the MP4MaxFileSize property

    /*
    Property MP4MaxFileTime

    property MP4MaxFileTime

    */
    inline int MP4MaxFileTime() const; //Returns the value of MP4MaxFileTime
    inline void SetMP4MaxFileTime(int value); //Sets the value of the MP4MaxFileTime property

    /*
    Property MP4Path

    property MP4Path

    */
    inline QString MP4Path() const; //Returns the value of MP4Path
    inline void SetMP4Path(const QString& value); //Sets the value of the MP4Path property

    /*
    Property MP4Prefix

    property MP4Prefix

    */
    inline QString MP4Prefix() const; //Returns the value of MP4Prefix
    inline void SetMP4Prefix(const QString& value); //Sets the value of the MP4Prefix property

    /*
    Property MP4Status

    property MP4Status

    */
    inline VITAMINDECODERLib::EAVIRecordState MP4Status() const; //Returns the value of MP4Status

    /*
    Property MaxDigitalZoomFactor

    property MaxDigitalZoomFactor

    */
    inline int MaxDigitalZoomFactor() const; //Returns the value of MaxDigitalZoomFactor
    inline void SetMaxDigitalZoomFactor(int value); //Sets the value of the MaxDigitalZoomFactor property

    /*
    Property MaxFileSize

    property MaxFileSize

    */
    inline int MaxFileSize() const; //Returns the value of MaxFileSize
    inline void SetMaxFileSize(int value); //Sets the value of the MaxFileSize property

    /*
    Property MaxLocationSize

    property MaxLocationSize

    */
    inline int MaxLocationSize() const; //Returns the value of MaxLocationSize
    inline void SetMaxLocationSize(int value); //Sets the value of the MaxLocationSize property

    /*
    Property MaxReconnectionCount

    property MaxReconnectionCount

    */
    inline int MaxReconnectionCount() const; //Returns the value of MaxReconnectionCount
    inline void SetMaxReconnectionCount(int value); //Sets the value of the MaxReconnectionCount property

    /*
    Property MediaRecord

    property MediaRecord

    */
    inline bool MediaRecord() const; //Returns the value of MediaRecord

    /*
    Property MediaType

    property MediaType

    */
    inline VITAMINDECODERLib::EMediaType MediaType() const; //Returns the value of MediaType
    inline void SetMediaType(VITAMINDECODERLib::EMediaType value); //Sets the value of the MediaType property

    /*
    Property MicMute

    property MicMute

    */
    inline bool MicMute() const; //Returns the value of MicMute
    inline void SetMicMute(bool value); //Sets the value of the MicMute property

    /*
    Property MicVolume

    property MicVolume

    */
    inline int MicVolume() const; //Returns the value of MicVolume
    inline void SetMicVolume(int value); //Sets the value of the MicVolume property

    /*
    Property MirrorMaskaWnd

    property MirrorMaskaWnd

    */
    inline bool MirrorMaskaWnd() const; //Returns the value of MirrorMaskaWnd
    inline void SetMirrorMaskaWnd(bool value); //Sets the value of the MirrorMaskaWnd property

    /*
    Property NamePassOption

    property NamePassOption

    */
    inline bool NamePassOption() const; //Returns the value of NamePassOption
    inline void SetNamePassOption(bool value); //Sets the value of the NamePassOption property

    /*
    Property NotifyAudioPacket

    property NotifyAudioPacket

    */
    inline bool NotifyAudioPacket() const; //Returns the value of NotifyAudioPacket
    inline void SetNotifyAudioPacket(bool value); //Sets the value of the NotifyAudioPacket property

    /*
    Property NotifyImageFormat

    property NotifyImageFormat

    */
    inline VITAMINDECODERLib::EPictureFormat NotifyImageFormat() const; //Returns the value of NotifyImageFormat
    inline void SetNotifyImageFormat(VITAMINDECODERLib::EPictureFormat value); //Sets the value of the NotifyImageFormat property

    /*
    Property NotifyNewAudio

    property NotifyNewAudio

    */
    inline bool NotifyNewAudio() const; //Returns the value of NotifyNewAudio
    inline void SetNotifyNewAudio(bool value); //Sets the value of the NotifyNewAudio property

    /*
    Property NotifyVideoData

    property NotifyVideoData

    */
    inline bool NotifyVideoData() const; //Returns the value of NotifyVideoData
    inline void SetNotifyVideoData(bool value); //Sets the value of the NotifyVideoData property

    /*
    Property NotifyVideoPacket

    property NotifyVideoPacket

    */
    inline bool NotifyVideoPacket() const; //Returns the value of NotifyVideoPacket
    inline void SetNotifyVideoPacket(bool value); //Sets the value of the NotifyVideoPacket property

    /*
    Property PanelButtonStyle

    property PanelButtonStyle

    */
    inline VITAMINDECODERLib::EPanelBtnStyle PanelButtonStyle() const; //Returns the value of PanelButtonStyle
    inline void SetPanelButtonStyle(VITAMINDECODERLib::EPanelBtnStyle value); //Sets the value of the PanelButtonStyle property

    /*
    Property ParseIPFromUrl

    property ParseIPFromUrl

    */
    inline bool ParseIPFromUrl() const; //Returns the value of ParseIPFromUrl
    inline void SetParseIPFromUrl(bool value); //Sets the value of the ParseIPFromUrl property

    /*
    Property Password

    property Password

    */
    inline QString Password() const; //Returns the value of Password
    inline void SetPassword(const QString& value); //Sets the value of the Password property

    /*
    Property PlayMute

    property PlayMute

    */
    inline bool PlayMute() const; //Returns the value of PlayMute
    inline void SetPlayMute(bool value); //Sets the value of the PlayMute property

    /*
    Property PlayVolume

    property PlayVolume

    */
    inline int PlayVolume() const; //Returns the value of PlayVolume
    inline void SetPlayVolume(int value); //Sets the value of the PlayVolume property

    /*
    Property PostEventTime

    property PostEventTime

    */
    inline int PostEventTime() const; //Returns the value of PostEventTime
    inline void SetPostEventTime(int value); //Sets the value of the PostEventTime property

    /*
    Property PreBufferMemorySize

    property PreBufferMemorySize

    */
    inline int PreBufferMemorySize() const; //Returns the value of PreBufferMemorySize
    inline void SetPreBufferMemorySize(int value); //Sets the value of the PreBufferMemorySize property

    /*
    Property PreEventTime

    property PreEventTime

    */
    inline int PreEventTime() const; //Returns the value of PreEventTime
    inline void SetPreEventTime(int value); //Sets the value of the PreEventTime property

    /*
    Property PresetURL

    property PresetURL

    */
    inline QString PresetURL() const; //Returns the value of PresetURL
    inline void SetPresetURL(const QString& value); //Sets the value of the PresetURL property

    /*
    Property PtzURL

    property PtzURL

    */
    inline QString PtzURL() const; //Returns the value of PtzURL
    inline void SetPtzURL(const QString& value); //Sets the value of the PtzURL property

    /*
    Property RTSPProxyAddress

    property RTSPProxyAddress

    */
    inline QString RTSPProxyAddress() const; //Returns the value of RTSPProxyAddress
    inline void SetRTSPProxyAddress(const QString& value); //Sets the value of the RTSPProxyAddress property

    /*
    Property RTSPProxyPort

    property RTSPProxyPort

    */
    inline int RTSPProxyPort() const; //Returns the value of RTSPProxyPort
    inline void SetRTSPProxyPort(int value); //Sets the value of the RTSPProxyPort property

    /*
    Property ReadSettingByParam

    property ReadSettingByParam

    */
    inline bool ReadSettingByParam() const; //Returns the value of ReadSettingByParam
    inline void SetReadSettingByParam(bool value); //Sets the value of the ReadSettingByParam property

    /*
    Property ReadWriteTimeout

    property ReadWriteTimeout

    */
    inline int ReadWriteTimeout() const; //Returns the value of ReadWriteTimeout
    inline void SetReadWriteTimeout(int value); //Sets the value of the ReadWriteTimeout property

    /*
    Property RecallURL

    property RecallURL

    */
    inline QString RecallURL() const; //Returns the value of RecallURL
    inline void SetRecallURL(const QString& value); //Sets the value of the RecallURL property

    /*
    Property ReconnectionWait

    property ReconnectionWait

    */
    inline int ReconnectionWait() const; //Returns the value of ReconnectionWait
    inline void SetReconnectionWait(int value); //Sets the value of the ReconnectionWait property

    /*
    Property RegSubKey

    property RegSubKey

    */
    inline QString RegSubKey() const; //Returns the value of RegSubKey
    inline void SetRegSubKey(const QString& value); //Sets the value of the RegSubKey property

    /*
    Property RegkeyRoot

    property RegkeyRoot

    */
    inline VITAMINDECODERLib::ERegistryRoot RegkeyRoot() const; //Returns the value of RegkeyRoot
    inline void SetRegkeyRoot(VITAMINDECODERLib::ERegistryRoot value); //Sets the value of the RegkeyRoot property

    /*
    Property RemoteIDStr

    property RemoteIDStr

    */
    inline QString RemoteIDStr() const; //Returns the value of RemoteIDStr
    inline void SetRemoteIDStr(const QString& value); //Sets the value of the RemoteIDStr property

    /*
    Property RemoteIPAddr

    property RemoteIPAddr

    */
    inline QString RemoteIPAddr() const; //Returns the value of RemoteIPAddr
    inline void SetRemoteIPAddr(const QString& value); //Sets the value of the RemoteIPAddr property

    /*
    Property RightTitleSpace

    property RightTitleSpace

    */
    inline int RightTitleSpace() const; //Returns the value of RightTitleSpace
    inline void SetRightTitleSpace(int value); //Sets the value of the RightTitleSpace property

    /*
    Property SVCTDecodeLevel

    property SVCTDecodeLevel

    */
    inline int SVCTDecodeLevel() const; //Returns the value of SVCTDecodeLevel
    inline void SetSVCTDecodeLevel(int value); //Sets the value of the SVCTDecodeLevel property

    /*
    Property SVCTFrameInterval

    property SVCTFrameInterval

    */
    inline int SVCTFrameInterval() const; //Returns the value of SVCTFrameInterval
    inline void SetSVCTFrameInterval(int value); //Sets the value of the SVCTFrameInterval property

    /*
    Property SVCTFrameLevel

    property SVCTFrameLevel

    */
    inline int SVCTFrameLevel() const; //Returns the value of SVCTFrameLevel
    inline void SetSVCTFrameLevel(int value); //Sets the value of the SVCTFrameLevel property

    /*
    Property ServerModelType

    property ServerModelType

    */
    inline VITAMINDECODERLib::EServerModelType ServerModelType() const; //Returns the value of ServerModelType
    inline void SetServerModelType(VITAMINDECODERLib::EServerModelType value); //Sets the value of the ServerModelType property

    /*
    Property SetMD

    property SetMD

    */
    inline QString SetMD() const; //Returns the value of SetMD
    inline void SetSetMD(const QString& value); //Sets the value of the SetMD property

    /*
    Property SetMDParmUrl

    property SetMDParmUrl

    */
    inline QString SetMDParmUrl() const; //Returns the value of SetMDParmUrl
    inline void SetSetMDParmUrl(const QString& value); //Sets the value of the SetMDParmUrl property

    /*
    Property SetMaskEditParmUrl

    property SetMaskEditParmUrl

    */
    inline QString SetMaskEditParmUrl() const; //Returns the value of SetMaskEditParmUrl
    inline void SetSetMaskEditParmUrl(const QString& value); //Sets the value of the SetMaskEditParmUrl property

    /*
    Property SnapshotUrl

    property SnapshotUrl

    */
    inline QString SnapshotUrl() const; //Returns the value of SnapshotUrl

    /*
    Property StreamingBufferTime

    property StreamingBufferTime

    */
    inline int StreamingBufferTime() const; //Returns the value of StreamingBufferTime
    inline void SetStreamingBufferTime(int value); //Sets the value of the StreamingBufferTime property

    /*
    Property StreamingOption

    property StreamingOption

    */
    inline VITAMINDECODERLib::EStreamingOption StreamingOption() const; //Returns the value of StreamingOption
    inline void SetStreamingOption(VITAMINDECODERLib::EStreamingOption value); //Sets the value of the StreamingOption property

    /*
    Property Stretch

    property Stretch

    */
    inline bool Stretch() const; //Returns the value of Stretch
    inline void SetStretch(bool value); //Sets the value of the Stretch property

    /*
    Property StretchFullScreen

    property StretchFullScreen

    */
    inline bool StretchFullScreen() const; //Returns the value of StretchFullScreen
    inline void SetStretchFullScreen(bool value); //Sets the value of the StretchFullScreen property

    /*
    Property TalkButtonStyle

    property TalkButtonStyle

    */
    inline VITAMINDECODERLib::ETalkBtnStyle TalkButtonStyle() const; //Returns the value of TalkButtonStyle
    inline void SetTalkButtonStyle(VITAMINDECODERLib::ETalkBtnStyle value); //Sets the value of the TalkButtonStyle property

    /*
    Property TextOnVideo

    property TextOnVideo

    */
    inline QString TextOnVideo() const; //Returns the value of TextOnVideo

    /*
    Property TitleBarColor

    property TitleBarColor

    */
    inline QColor TitleBarColor() const; //Returns the value of TitleBarColor
    inline void SetTitleBarColor(const QColor& value); //Sets the value of the TitleBarColor property

    /*
    Property TitleTextColor

    property TitleTextColor

    */
    inline QColor TitleTextColor() const; //Returns the value of TitleTextColor
    inline void SetTitleTextColor(const QColor& value); //Sets the value of the TitleTextColor property

    /*
    Property UartURL

    property UartURL

    */
    inline QString UartURL() const; //Returns the value of UartURL
    inline void SetUartURL(const QString& value); //Sets the value of the UartURL property

    /*
    Property UpdateJoystickInterval

    property UpdateJoystickInterval

    */
    inline int UpdateJoystickInterval() const; //Returns the value of UpdateJoystickInterval
    inline void SetUpdateJoystickInterval(int value); //Sets the value of the UpdateJoystickInterval property

    /*
    Property Url

    property Url

    */
    inline QString Url() const; //Returns the value of Url
    inline void SetUrl(const QString& value); //Sets the value of the Url property

    /*
    Property Url2

    property Url2

    */
    inline QString Url2() const; //Returns the value of Url2
    inline void SetUrl2(const QString& value); //Sets the value of the Url2 property

    /*
    Property UserDateFormat

    property UserDateFormat

    */
    inline bool UserDateFormat() const; //Returns the value of UserDateFormat
    inline void SetUserDateFormat(bool value); //Sets the value of the UserDateFormat property

    /*
    Property UserName

    property UserName

    */
    inline QString UserName() const; //Returns the value of UserName
    inline void SetUserName(const QString& value); //Sets the value of the UserName property

    /*
    Property VideoBitRate

    property VideoBitRate

    */
    inline int VideoBitRate() const; //Returns the value of VideoBitRate

    /*
    Property VideoQuality2K

    property VideoQuality2K

    */
    inline VITAMINDECODERLib::EVideoQuality2K VideoQuality2K() const; //Returns the value of VideoQuality2K
    inline void SetVideoQuality2K(VITAMINDECODERLib::EVideoQuality2K value); //Sets the value of the VideoQuality2K property

    /*
    Property VideoSize2K

    property VideoSize2K

    */
    inline VITAMINDECODERLib::EVideoSize2K VideoSize2K() const; //Returns the value of VideoSize2K
    inline void SetVideoSize2K(VITAMINDECODERLib::EVideoSize2K value); //Sets the value of the VideoSize2K property

    /*
    Property ViewStream

    property ViewStream

    */
    inline VITAMINDECODERLib::EDualStreamOption ViewStream() const; //Returns the value of ViewStream
    inline void SetViewStream(VITAMINDECODERLib::EDualStreamOption value); //Sets the value of the ViewStream property

    /*
    Property WheelEventHandler

    property WheelEventHandler

    */
    inline bool WheelEventHandler() const; //Returns the value of WheelEventHandler
    inline void SetWheelEventHandler(bool value); //Sets the value of the WheelEventHandler property

    /*
    Method ChooseAVIAudioCompressor

    method ChooseAVIAudioCompressor

    */
    inline int ChooseAVIAudioCompressor(const QString& bstrDialogTitle);

    /*
    Method ChooseAVIVideoCompressor

    method ChooseAVIVideoCompressor

    */
    inline int ChooseAVIVideoCompressor(const QString& bstrDialogTitle);

    /*
    Method ClearAvSyncChannel

    method ClearAvSyncChannel

    */
    inline void ClearAvSyncChannel();

    /*
    Method CloseConnect

    method CloseConnect

    */
    inline void CloseConnect();

    /*
    Method Connect

    method Connect

    */
    inline int Connect();

    /*
    Method DelPresetPosition

    method DelPresetPosition

    */
    inline int DelPresetPosition(const QString& bstrPosition);

    /*
    Method Disconnect

    method Disconnect

    */
    inline void Disconnect();

    /*
    Method DisplayStringOnVideo

    method DisplayStringOnVideo

    */
    inline int DisplayStringOnVideo(const QString& strText, int lFontSize, VITAMINDECODERLib::EFontStyle EFontStyle, int lX, int lY, int lFontColorR, int lFontColorG, int lFontColorB, int lOutlineColorR, int lOutlineColorG, int lOutlineColorB);

    /*
    Method EnglishString

    property EnglishString

    */
    inline QString EnglishString(int lIndex);

    /*
    Method FishEyeAddPresetInfoToList

    method FishEyeAddPresetInfoToList

    */
    inline int FishEyeAddPresetInfoToList(int lX, int lY, int lZ, int lZFactor, int lScroll);

    /*
    Method FishEyeCtrl

    method FishEyeCtrl

    */
    inline int FishEyeCtrl(VITAMINDECODERLib::EFishEyeControl eCtrlType, const QString& strCtrlMove, int lSpeed);

    /*
    Method FishEyeGetPresetInfo

    method FishEyeGetPresetInfo

    */
    inline int FishEyeGetPresetInfo();

    /*
    Method FishEyeGoPreset

    method FishEyeGoPreset

    */
    inline int FishEyeGoPreset(int lX, int lY, int lZ, int lZFactor, int lScroll);

    /*
    Method FishEyeRegionAspectRatio

    method FishEyeRegionAspectRatio

    */
    inline int FishEyeRegionAspectRatio(int lAspectRatioW, int lAspectRatioH);

    /*
    Method FishEyeRemovePresetInfoFromList

    method FishEyeRemovePresetInfoFromList

    */
    inline int FishEyeRemovePresetInfoFromList(int lX, int lY, int lZ, int lZFactor, int lScroll);

    /*
    Method FishEyeResetPresetList

    method FishEyeResetPresetList

    */
    inline int FishEyeResetPresetList();

    /*
    Method GetConnectionStatus

    method GetConnectionStatus

    */
    inline int GetConnectionStatus(QVariant& pvData);

    /*
    Method GetDigitalIn

    method GetDigitalIn

    */
    inline int GetDigitalIn(int lPort, QVariant& plData);

    /*
    Method GetPtzPresetPosition

    method GetPtzPresetPosition

    */
    inline int GetPtzPresetPosition(QVariant& pvData);

    /*
    Method GetSnapshot

    method GetSnapshot

    */
    inline int GetSnapshot(VITAMINDECODERLib::EPictureFormat eFormat, QVariant& pvData, QVariant& pvInfo);

    /*
    Method GetUartData

    method GetUartData

    */
    inline int GetUartData(QVariant& pbstrData, int lReadLen);

    /*
    Method GetUartData

    method GetUartData

    */
    inline int GetUartData(QVariant& pbstrData, int lReadLen, int lPort);

    /*
    Method GetUartData

    method GetUartData

    */
    inline int GetUartData(QVariant& pbstrData, int lReadLen, int lPort, int lTimeout);

    /*
    Method GetUartDataBinary

    method GetUartDataBinary

    */
    inline int GetUartDataBinary(QVariant& pvData, int lReadLen);

    /*
    Method GetUartDataBinary

    method GetUartDataBinary

    */
    inline int GetUartDataBinary(QVariant& pvData, int lReadLen, int lPort);

    /*
    Method GetUartDataBinary

    method GetUartDataBinary

    */
    inline int GetUartDataBinary(QVariant& pvData, int lReadLen, int lPort, int lTimeout);

    /*
    Method HttpCommand

    method HttpCommand

    */
    inline int HttpCommand(const QString& strUrlCommand, bool bPost, bool bReadData, QVariant& strRetData);

    /*
    Method InputMediaPacket

    method InputMediaPacket

    */
    inline int InputMediaPacket(int lLength, QVariant& pvPacket);

    /*
    Method InputMediaPacketX

    method InputMediaPacketX

    */
    inline int InputMediaPacketX(int lLength, int lDataPtr);

    /*
    Method OpenAudioRecorder

    method OpenAudioRecorder

    */
    inline void OpenAudioRecorder();

    /*
    Method OpenDigitalZoomEditWnd

    method OpenDigitalZoomEditWnd

    */
    inline int OpenDigitalZoomEditWnd();

    /*
    Method OpenMicVolumeEditWnd

    method OpenMicVolumeEditWnd

    */
    inline int OpenMicVolumeEditWnd();

    /*
    Method OpenVolumeEditWnd

    method OpenVolumeEditWnd

    */
    inline int OpenVolumeEditWnd();

    /*
    Method RecallPtzPosition

    method RecallPtzPosition

    */
    inline int RecallPtzPosition(const QString& bstrPos);

    /*
    Method RefreshServerConfig

    method RefreshServerConfig

    */
    inline int RefreshServerConfig();

    /*
    Method RepairDatabase

    method RepairDatabase

    */
    inline int RepairDatabase(const QString& bstrDatabase);

    /*
    Method RepairLocation

    method RepairLocation

    */
    inline int RepairLocation(const QString& bstrLocation);

    /*
    Method RestoreControlHandle

    method RestoreControlHandle

    */
    inline int RestoreControlHandle();

    /*
    Method RtspPause

    method RtspPause

    */
    inline int RtspPause();

    /*
    Method RtspPlay

    method RtspPlay

    */
    inline int RtspPlay();

    /*
    Method RtspStop

    method RtspStop

    */
    inline int RtspStop();

    /*
    Method SavePresetPosition

    method SavePresetPosition

    */
    inline int SavePresetPosition(const QString& bstrPosition);

    /*
    Method SaveSendMail

    method SaveSendMail

    */
    inline int SaveSendMail(VITAMINDECODERLib::EPictureFormat nType, const QString& bstrSendTo);

    /*
    Method SaveSnapshot

    method SaveSnapshot

    */
    inline int SaveSnapshot(VITAMINDECODERLib::EPictureFormat eFormat, const QString& bstrFileName);

    /*
    Method SendCameraCommand

    method SendCameraCommand

    */
    inline int SendCameraCommand(const QString& bstrCMD);

    /*
    Method SendCameraCommand

    method SendCameraCommand

    */
    inline int SendCameraCommand(const QString& bstrCMD, int lTimeout);

    /*
    Method SendCameraCommandMap

    method SendCameraCommandMap

    */
    inline int SendCameraCommandMap(int lX, int lY);

    /*
    Method SendCameraControlSpeed

    method SendCameraControlSpeed

    */
    inline int SendCameraControlSpeed(VITAMINDECODERLib::ESpeedType eType, int lSpeed);

    /*
    Method SendDigitalOut

    method SendDigitalOut

    */
    inline int SendDigitalOut(int lPort, int lValue);

    /*
    Method SendUartCommand

    method SendUartCommand

    */
    inline int SendUartCommand(const QString& bstrCMD);

    /*
    Method SendUartCommand

    method SendUartCommand

    */
    inline int SendUartCommand(const QString& bstrCMD, bool bFlush);

    /*
    Method SendUartCommand

    method SendUartCommand

    */
    inline int SendUartCommand(const QString& bstrCMD, bool bFlush, int lPort);

    /*
    Method SendUartCommandBinary

    method SendUartCommandBinary

    */
    inline int SendUartCommandBinary(const QVariant& vData);

    /*
    Method SendUartCommandBinary

    method SendUartCommandBinary

    */
    inline int SendUartCommandBinary(const QVariant& vData, bool bFlush);

    /*
    Method SendUartCommandBinary

    method SendUartCommandBinary

    */
    inline int SendUartCommandBinary(const QVariant& vData, bool bFlush, int lPort);

    /*
    Method ServerConfig

    property ServerConfig

    */
    inline QString ServerConfig(int lCfgIndex, int lExtraIdx);

    /*
    Method ServerConfigEntry

    property ServerConfigEntry

    */
    inline QString ServerConfigEntry(int lCfgIndex);

    /*
    Method ServerConfigSection

    property ServerConfigSection

    */
    inline QString ServerConfigSection(int lCfgIndex);

    /*
    Method SetBitmapHandle

    method SetBitmapHandle

    */
    inline int SetBitmapHandle(int lBitmapHandle);

    /*
    Method SetDatabasePath

    method SetDatabasePath

    */
    inline int SetDatabasePath(const QString& newVal, bool bAutoCreate);

    /*
    Method SetFullScreen

    method SetFullScreen

    */
    inline int SetFullScreen(bool bFullScreen);

    /*
    Method SetGivenLangInfo

    method SetGivenLangInfo

    */
    inline int SetGivenLangInfo(int lCodePage, int lFontSize, int lCharSet, bool bPitch, bool bSwiss, const QString& strFontName);

    /*
    Method SetLangString

    method SetLangString

    */
    inline int SetLangString(int lIndex, const QString& strUnicode);

    /*
    Method SetLangStringHex

    method SetLangStringHex

    */
    inline int SetLangStringHex(int lIndex, const QString& strValue);

    /*
    Method SetLocation

    method SetLocation

    */
    inline int SetLocation(const QString& bstrLocation, bool bAutoCreate);

    /*
    Method SetServerConfig

    method SetServerConfig

    */
    inline int SetServerConfig(int lCfgIndex, int lExtraIdx, const QString& bstrValue);

    /*
    Method SetServerDateTime

    method SetServerDateTime

    */
    inline int SetServerDateTime(const QString& bstrDate, const QString& bstrTime);

    /*
    Method StartAVIConversion

    method StartAVIConversion

    */
    inline int StartAVIConversion();

    /*
    Method StartMP4Conversion

    method StartMP4Conversion

    */
    inline int StartMP4Conversion();

    /*
    Method StartMediaRecord

    method StartMediaRecord

    */
    inline int StartMediaRecord(VITAMINDECODERLib::EMediaType EMediaType);

    /*
    Method StartMediaRecordEx

    method StartMediaRecordEx

    */
    inline int StartMediaRecordEx(VITAMINDECODERLib::EMediaType EMediaType, bool bEventRecord);

    /*
    Method StartMicTalk

    method StartMicTalk

    */
    inline int StartMicTalk();

    /*
    Method StartPacketInput

    method StartPacketInput

    */
    inline int StartPacketInput(VITAMINDECODERLib::EMediaType EMediaType);

    /*
    Method StopAVIConversion

    method StopAVIConversion

    */
    inline int StopAVIConversion();

    /*
    Method StopMP4Conversion

    method StopMP4Conversion

    */
    inline int StopMP4Conversion();

    /*
    Method StopMediaRecord

    method StopMediaRecord

    */
    inline int StopMediaRecord();

    /*
    Method StopMicTalk

    method StopMicTalk

    */
    inline int StopMicTalk();

    /*
    Method StopPacketInput

    method StopPacketInput

    */
    inline int StopPacketInput();

    /*
    Method UpdateServerConfig

    method UpdateServerConfig

    */
    inline int UpdateServerConfig();

    /*
    Method hiddenFunction

    method hiddenFunction

    */
    inline void hiddenFunction(VITAMINDECODERLib::EDBRecordEventType eEventType, VITAMINDECODERLib::EDBStatusCode eStatusCode, VITAMINDECODERLib::EPTZEnableFlag ePtz, VITAMINDECODERLib::EServerConfig eCfg, VITAMINDECODERLib::EAVIRecordState eRec, VITAMINDECODERLib::EControlButtonState eState);

};

// Actual coclasses
class VITAMINDECODERLIB_EXPORT VitaminCtrl : public QAxWidget
{
public:
    VitaminCtrl(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{70edcf63-ca7e-4812-8528-da1ea2fd53b6}");
    }

    VitaminCtrl(IVitaminCtrl *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AVIFilePathName

    property AVIFilePathName

    */
    inline QString AVIFilePathName() const; //Returns the value of AVIFilePathName
    inline void SetAVIFilePathName(const QString& value); //Sets the value of the AVIFilePathName property

    /*
    Property AVIManualNaming

    property AVIManualNaming

    */
    inline bool AVIManualNaming() const; //Returns the value of AVIManualNaming
    inline void SetAVIManualNaming(bool value); //Sets the value of the AVIManualNaming property

    /*
    Property AVIMaxFileSize

    property AVIMaxFileSize

    */
    inline int AVIMaxFileSize() const; //Returns the value of AVIMaxFileSize
    inline void SetAVIMaxFileSize(int value); //Sets the value of the AVIMaxFileSize property

    /*
    Property AVIMaxFileTimeLength

    property AVIMaxFileTimeLength

    */
    inline int AVIMaxFileTimeLength() const; //Returns the value of AVIMaxFileTimeLength
    inline void SetAVIMaxFileTimeLength(int value); //Sets the value of the AVIMaxFileTimeLength property

    /*
    Property AVIPath

    property AVIPath

    */
    inline QString AVIPath() const; //Returns the value of AVIPath
    inline void SetAVIPath(const QString& value); //Sets the value of the AVIPath property

    /*
    Property AVIRecordTimeout

    property AVIRecordTimeout

    */
    inline int AVIRecordTimeout() const; //Returns the value of AVIRecordTimeout
    inline void SetAVIRecordTimeout(int value); //Sets the value of the AVIRecordTimeout property

    /*
    Property AVIStatus

    property AVIStatus

    */
    inline VITAMINDECODERLib::EAVIRecordState AVIStatus() const; //Returns the value of AVIStatus

    /*
    Property AVIVideoFrameRate

    property AVIVideoFrameRate

    */
    inline int AVIVideoFrameRate() const; //Returns the value of AVIVideoFrameRate
    inline void SetAVIVideoFrameRate(int value); //Sets the value of the AVIVideoFrameRate property

    /*
    Property AVIVideoHeight

    property AVIVideoHeight

    */
    inline int AVIVideoHeight() const; //Returns the value of AVIVideoHeight
    inline void SetAVIVideoHeight(int value); //Sets the value of the AVIVideoHeight property

    /*
    Property AVIVideoSizeByStream

    property AVIVideoSizeByStream

    */
    inline bool AVIVideoSizeByStream() const; //Returns the value of AVIVideoSizeByStream
    inline void SetAVIVideoSizeByStream(bool value); //Sets the value of the AVIVideoSizeByStream property

    /*
    Property AVIVideoWidth

    property AVIVideoWidth

    */
    inline int AVIVideoWidth() const; //Returns the value of AVIVideoWidth
    inline void SetAVIVideoWidth(int value); //Sets the value of the AVIVideoWidth property

    /*
    Property AntiTearing

    property AntiTearing

    */
    inline bool AntiTearing() const; //Returns the value of AntiTearing
    inline void SetAntiTearing(bool value); //Sets the value of the AntiTearing property

    /*
    Property AudioBitRate

    property AudioBitRate

    */
    inline int AudioBitRate() const; //Returns the value of AudioBitRate

    /*
    Property AutoAVISettings

    property AutoAVISettings

    */
    inline bool AutoAVISettings() const; //Returns the value of AutoAVISettings
    inline void SetAutoAVISettings(bool value); //Sets the value of the AutoAVISettings property

    /*
    Property AutoReconnect

    property AutoReconnect

    */
    inline bool AutoReconnect() const; //Returns the value of AutoReconnect
    inline void SetAutoReconnect(bool value); //Sets the value of the AutoReconnect property

    /*
    Property AutoServerModelType

    property AutoServerModelType

    */
    inline bool AutoServerModelType() const; //Returns the value of AutoServerModelType
    inline void SetAutoServerModelType(bool value); //Sets the value of the AutoServerModelType property

    /*
    Property AutoStartConnection

    property AutoStartConnection

    */
    inline bool AutoStartConnection() const; //Returns the value of AutoStartConnection
    inline void SetAutoStartConnection(bool value); //Sets the value of the AutoStartConnection property

    /*
    Property BeRightClickEventHandler

    property BeRightClickEventHandler

    */
    inline bool BeRightClickEventHandler() const; //Returns the value of BeRightClickEventHandler
    inline void SetBeRightClickEventHandler(bool value); //Sets the value of the BeRightClickEventHandler property

    /*
    Property BitmapFile

    property BitmapFile

    */
    inline QString BitmapFile() const; //Returns the value of BitmapFile
    inline void SetBitmapFile(const QString& value); //Sets the value of the BitmapFile property

    /*
    Property ChangePresentMode

    property ChangePresentMode

    */
    inline VITAMINDECODERLib::EFishEyePresentMode ChangePresentMode() const; //Returns the value of ChangePresentMode
    inline void SetChangePresentMode(VITAMINDECODERLib::EFishEyePresentMode value); //Sets the value of the ChangePresentMode property

    /*
    Property CircularMode

    property CircularMode

    */
    inline bool CircularMode() const; //Returns the value of CircularMode
    inline void SetCircularMode(bool value); //Sets the value of the CircularMode property

    /*
    Property ClickEventHandler

    property ClickEventHandler

    */
    inline VITAMINDECODERLib::EClickEventHandler ClickEventHandler() const; //Returns the value of ClickEventHandler
    inline void SetClickEventHandler(VITAMINDECODERLib::EClickEventHandler value); //Sets the value of the ClickEventHandler property

    /*
    Property ConnectionProtocol

    property ConnectionProtocol

    */
    inline VITAMINDECODERLib::EConnProtocol ConnectionProtocol() const; //Returns the value of ConnectionProtocol
    inline void SetConnectionProtocol(VITAMINDECODERLib::EConnProtocol value); //Sets the value of the ConnectionProtocol property

    /*
    Property ConnectionTimeout

    property ConnectionTimeout

    */
    inline int ConnectionTimeout() const; //Returns the value of ConnectionTimeout
    inline void SetConnectionTimeout(int value); //Sets the value of the ConnectionTimeout property

    /*
    Property ControlButtonOpts

    property ControlButtonOpts

    */
    inline int ControlButtonOpts() const; //Returns the value of ControlButtonOpts
    inline void SetControlButtonOpts(int value); //Sets the value of the ControlButtonOpts property

    /*
    Property ControlID

    property ControlID

    */
    inline int ControlID() const; //Returns the value of ControlID
    inline void SetControlID(int value); //Sets the value of the ControlID property

    /*
    Property ControlPort

    property ControlPort

    */
    inline int ControlPort() const; //Returns the value of ControlPort
    inline void SetControlPort(int value); //Sets the value of the ControlPort property

    /*
    Property ControlStatus

    property ControlStatus

    */
    inline VITAMINDECODERLib::EControlStatus ControlStatus() const; //Returns the value of ControlStatus

    /*
    Property ControlType

    property ControlType

    */
    inline VITAMINDECODERLib::EControlType ControlType() const; //Returns the value of ControlType
    inline void SetControlType(VITAMINDECODERLib::EControlType value); //Sets the value of the ControlType property

    /*
    Property ControlVersion

    property ControlVersion

    */
    inline QString ControlVersion() const; //Returns the value of ControlVersion

    /*
    Property CurrentAudioCodecType

    property CurrentAudioCodecType

    */
    inline VITAMINDECODERLib::EAudioCodecType CurrentAudioCodecType() const; //Returns the value of CurrentAudioCodecType

    /*
    Property CurrentAudioPort

    property CurrentAudioPort

    */
    inline int CurrentAudioPort() const; //Returns the value of CurrentAudioPort

    /*
    Property CurrentControlCam

    property CurrentControlCam

    */
    inline int CurrentControlCam() const; //Returns the value of CurrentControlCam
    inline void SetCurrentControlCam(int value); //Sets the value of the CurrentControlCam property

    /*
    Property CurrentMediaType

    property CurrentMediaType

    */
    inline VITAMINDECODERLib::EMediaType CurrentMediaType() const; //Returns the value of CurrentMediaType

    /*
    Property CurrentProtocol

    property CurrentProtocol

    */
    inline VITAMINDECODERLib::EConnProtocol CurrentProtocol() const; //Returns the value of CurrentProtocol

    /*
    Property CurrentVideoCodecType

    property CurrentVideoCodecType

    */
    inline VITAMINDECODERLib::EVideoCodecType CurrentVideoCodecType() const; //Returns the value of CurrentVideoCodecType

    /*
    Property CurrentVideoPort

    property CurrentVideoPort

    */
    inline int CurrentVideoPort() const; //Returns the value of CurrentVideoPort

    /*
    Property DBHierarchy

    property DBHierarchy

    */
    inline bool DBHierarchy() const; //Returns the value of DBHierarchy
    inline void SetDBHierarchy(bool value); //Sets the value of the DBHierarchy property

    /*
    Property DDrawOnePass

    property DDrawOnePass

    */
    inline bool DDrawOnePass() const; //Returns the value of DDrawOnePass
    inline void SetDDrawOnePass(bool value); //Sets the value of the DDrawOnePass property

    /*
    Property DarwinConnection

    property DarwinConnection

    */
    inline bool DarwinConnection() const; //Returns the value of DarwinConnection
    inline void SetDarwinConnection(bool value); //Sets the value of the DarwinConnection property

    /*
    Property DarwinExtraPath

    property DarwinExtraPath

    */
    inline QString DarwinExtraPath() const; //Returns the value of DarwinExtraPath
    inline void SetDarwinExtraPath(const QString& value); //Sets the value of the DarwinExtraPath property

    /*
    Property DatabasePath

    property DatabasePath

    */
    inline QString DatabasePath() const; //Returns the value of DatabasePath

    /*
    Property Deblocking

    property Deblocking

    */
    inline bool Deblocking() const; //Returns the value of Deblocking
    inline void SetDeblocking(bool value); //Sets the value of the Deblocking property

    /*
    Property DecodeAV

    property DecodeAV

    */
    inline bool DecodeAV() const; //Returns the value of DecodeAV
    inline void SetDecodeAV(bool value); //Sets the value of the DecodeAV property

    /*
    Property DecodeSnapshot

    property DecodeSnapshot

    */
    inline bool DecodeSnapshot() const; //Returns the value of DecodeSnapshot
    inline void SetDecodeSnapshot(bool value); //Sets the value of the DecodeSnapshot property

    /*
    Property Deinterlace

    property Deinterlace

    */
    inline bool Deinterlace() const; //Returns the value of Deinterlace
    inline void SetDeinterlace(bool value); //Sets the value of the Deinterlace property

    /*
    Property DigitalInURL

    property DigitalInURL

    */
    inline QString DigitalInURL() const; //Returns the value of DigitalInURL
    inline void SetDigitalInURL(const QString& value); //Sets the value of the DigitalInURL property

    /*
    Property DigitalOutURL

    property DigitalOutURL

    */
    inline QString DigitalOutURL() const; //Returns the value of DigitalOutURL
    inline void SetDigitalOutURL(const QString& value); //Sets the value of the DigitalOutURL property

    /*
    Property DigitalZoomEnableChk

    property DigitalZoomEnableChk

    */
    inline bool DigitalZoomEnableChk() const; //Returns the value of DigitalZoomEnableChk
    inline void SetDigitalZoomEnableChk(bool value); //Sets the value of the DigitalZoomEnableChk property

    /*
    Property DigitalZoomEnabled

    property DigitalZoomEnabled

    */
    inline bool DigitalZoomEnabled() const; //Returns the value of DigitalZoomEnabled
    inline void SetDigitalZoomEnabled(bool value); //Sets the value of the DigitalZoomEnabled property

    /*
    Property DigitalZoomFactor

    property DigitalZoomFactor

    */
    inline int DigitalZoomFactor() const; //Returns the value of DigitalZoomFactor
    inline void SetDigitalZoomFactor(int value); //Sets the value of the DigitalZoomFactor property

    /*
    Property DigitalZoomX

    property DigitalZoomX

    */
    inline int DigitalZoomX() const; //Returns the value of DigitalZoomX
    inline void SetDigitalZoomX(int value); //Sets the value of the DigitalZoomX property

    /*
    Property DigitalZoomY

    property DigitalZoomY

    */
    inline int DigitalZoomY() const; //Returns the value of DigitalZoomY
    inline void SetDigitalZoomY(int value); //Sets the value of the DigitalZoomY property

    /*
    Property Display

    property Display

    */
    inline bool Display() const; //Returns the value of Display
    inline void SetDisplay(bool value); //Sets the value of the Display property

    /*
    Property DisplayErrorMsg

    property DisplayErrorMsg

    */
    inline bool DisplayErrorMsg() const; //Returns the value of DisplayErrorMsg
    inline void SetDisplayErrorMsg(bool value); //Sets the value of the DisplayErrorMsg property

    /*
    Property DisplayLastImage

    property DisplayLastImage

    */
    inline bool DisplayLastImage() const; //Returns the value of DisplayLastImage
    inline void SetDisplayLastImage(bool value); //Sets the value of the DisplayLastImage property

    /*
    Property DisplayMotionFrame

    property DisplayMotionFrame

    */
    inline bool DisplayMotionFrame() const; //Returns the value of DisplayMotionFrame
    inline void SetDisplayMotionFrame(bool value); //Sets the value of the DisplayMotionFrame property

    /*
    Property DisplayPeriod

    property DisplayPeriod

    */
    inline int DisplayPeriod() const; //Returns the value of DisplayPeriod
    inline void SetDisplayPeriod(int value); //Sets the value of the DisplayPeriod property

    /*
    Property DisplayTimeFormat

    property DisplayTimeFormat

    */
    inline VITAMINDECODERLib::EDisplayTimeFormat DisplayTimeFormat() const; //Returns the value of DisplayTimeFormat
    inline void SetDisplayTimeFormat(VITAMINDECODERLib::EDisplayTimeFormat value); //Sets the value of the DisplayTimeFormat property

    /*
    Property DrawHwnd

    property DrawHwnd

    */
    inline int DrawHwnd() const; //Returns the value of DrawHwnd
    inline void SetDrawHwnd(int value); //Sets the value of the DrawHwnd property

    /*
    Property EffectiveModelType

    property EffectiveModelType

    */
    inline VITAMINDECODERLib::EServerModelType EffectiveModelType() const; //Returns the value of EffectiveModelType

    /*
    Property EnableFishEye

    property EnableFishEye

    */
    inline bool EnableFishEye() const; //Returns the value of EnableFishEye
    inline void SetEnableFishEye(bool value); //Sets the value of the EnableFishEye property

    /*
    Property EnableJoystick

    property EnableJoystick

    */
    inline bool EnableJoystick() const; //Returns the value of EnableJoystick
    inline void SetEnableJoystick(bool value); //Sets the value of the EnableJoystick property

    /*
    Property EnableMD

    property EnableMD

    */
    inline bool EnableMD() const; //Returns the value of EnableMD
    inline void SetEnableMD(bool value); //Sets the value of the EnableMD property

    /*
    Property EnableMuteWhenTalk

    property EnableMuteWhenTalk

    */
    inline bool EnableMuteWhenTalk() const; //Returns the value of EnableMuteWhenTalk
    inline void SetEnableMuteWhenTalk(bool value); //Sets the value of the EnableMuteWhenTalk property

    /*
    Property EnableRTSPProxy

    property EnableRTSPProxy

    */
    inline bool EnableRTSPProxy() const; //Returns the value of EnableRTSPProxy
    inline void SetEnableRTSPProxy(bool value); //Sets the value of the EnableRTSPProxy property

    /*
    Property EnableRecordingTime

    property EnableRecordingTime

    */
    inline bool EnableRecordingTime() const; //Returns the value of EnableRecordingTime
    inline void SetEnableRecordingTime(bool value); //Sets the value of the EnableRecordingTime property

    /*
    Property EnableSSL

    property EnableSSL

    */
    inline bool EnableSSL() const; //Returns the value of EnableSSL
    inline void SetEnableSSL(bool value); //Sets the value of the EnableSSL property

    /*
    Property EnableTwoWayAudio

    property EnableTwoWayAudio

    */
    inline bool EnableTwoWayAudio() const; //Returns the value of EnableTwoWayAudio
    inline void SetEnableTwoWayAudio(bool value); //Sets the value of the EnableTwoWayAudio property

    /*
    Property EventTypes

    property EventTypes

    */
    inline int EventTypes() const; //Returns the value of EventTypes
    inline void SetEventTypes(int value); //Sets the value of the EventTypes property

    /*
    Property FileNameOfTime

    property FileNameOfTime

    */
    inline bool FileNameOfTime() const; //Returns the value of FileNameOfTime
    inline void SetFileNameOfTime(bool value); //Sets the value of the FileNameOfTime property

    /*
    Property FishEyeAspectRatioHeight

    property FishEyeAspectRatioHeight

    */
    inline int FishEyeAspectRatioHeight() const; //Returns the value of FishEyeAspectRatioHeight
    inline void SetFishEyeAspectRatioHeight(int value); //Sets the value of the FishEyeAspectRatioHeight property

    /*
    Property FishEyeAspectRatioWidth

    property FishEyeAspectRatioWidth

    */
    inline int FishEyeAspectRatioWidth() const; //Returns the value of FishEyeAspectRatioWidth
    inline void SetFishEyeAspectRatioWidth(int value); //Sets the value of the FishEyeAspectRatioWidth property

    /*
    Property FishEyeInitLocationInfo

    property FishEyeInitLocationInfo

    */
    inline QString FishEyeInitLocationInfo() const; //Returns the value of FishEyeInitLocationInfo
    inline void SetFishEyeInitLocationInfo(const QString& value); //Sets the value of the FishEyeInitLocationInfo property

    /*
    Property FishEyeMountType

    property FishEyeMountType

    */
    inline VITAMINDECODERLib::EFishEyeMountType FishEyeMountType() const; //Returns the value of FishEyeMountType
    inline void SetFishEyeMountType(VITAMINDECODERLib::EFishEyeMountType value); //Sets the value of the FishEyeMountType property

    /*
    Property FlipMaskWnd

    property FlipMaskWnd

    */
    inline bool FlipMaskWnd() const; //Returns the value of FlipMaskWnd
    inline void SetFlipMaskWnd(bool value); //Sets the value of the FlipMaskWnd property

    /*
    Property ForceGDI

    property ForceGDI

    */
    inline bool ForceGDI() const; //Returns the value of ForceGDI
    inline void SetForceGDI(bool value); //Sets the value of the ForceGDI property

    /*
    Property ForceNonYUV

    property ForceNonYUV

    */
    inline bool ForceNonYUV() const; //Returns the value of ForceNonYUV
    inline void SetForceNonYUV(bool value); //Sets the value of the ForceNonYUV property

    /*
    Property FrameRate

    property FrameRate

    */
    inline int FrameRate() const; //Returns the value of FrameRate

    /*
    Property GDIUseStretchBlt

    property GDIUseStretchBlt

    */
    inline bool GDIUseStretchBlt() const; //Returns the value of GDIUseStretchBlt
    inline void SetGDIUseStretchBlt(bool value); //Sets the value of the GDIUseStretchBlt property

    /*
    Property GetMD

    property GetMD

    */
    inline QString GetMD() const; //Returns the value of GetMD
    inline void SetGetMD(const QString& value); //Sets the value of the GetMD property

    /*
    Property GetMDParmUrl

    property GetMDParmUrl

    */
    inline QString GetMDParmUrl() const; //Returns the value of GetMDParmUrl
    inline void SetGetMDParmUrl(const QString& value); //Sets the value of the GetMDParmUrl property

    /*
    Property GetMaskEditParmUrl

    property GetMaskEditParmUrl

    */
    inline QString GetMaskEditParmUrl() const; //Returns the value of GetMaskEditParmUrl
    inline void SetGetMaskEditParmUrl(const QString& value); //Sets the value of the GetMaskEditParmUrl property

    /*
    Property HTTPProxyAddress

    property HTTPProxyAddress

    */
    inline QString HTTPProxyAddress() const; //Returns the value of HTTPProxyAddress
    inline void SetHTTPProxyAddress(const QString& value); //Sets the value of the HTTPProxyAddress property

    /*
    Property HTTPProxyPassword

    property HTTPProxyPassword

    */
    inline QString HTTPProxyPassword() const; //Returns the value of HTTPProxyPassword
    inline void SetHTTPProxyPassword(const QString& value); //Sets the value of the HTTPProxyPassword property

    /*
    Property HTTPProxyPort

    property HTTPProxyPort

    */
    inline int HTTPProxyPort() const; //Returns the value of HTTPProxyPort
    inline void SetHTTPProxyPort(int value); //Sets the value of the HTTPProxyPort property

    /*
    Property HTTPProxyType

    property HTTPProxyType

    */
    inline VITAMINDECODERLib::EHttpProxyType HTTPProxyType() const; //Returns the value of HTTPProxyType
    inline void SetHTTPProxyType(VITAMINDECODERLib::EHttpProxyType value); //Sets the value of the HTTPProxyType property

    /*
    Property HTTPProxyUserName

    property HTTPProxyUserName

    */
    inline QString HTTPProxyUserName() const; //Returns the value of HTTPProxyUserName
    inline void SetHTTPProxyUserName(const QString& value); //Sets the value of the HTTPProxyUserName property

    /*
    Property HideConnectIP

    property HideConnectIP

    */
    inline bool HideConnectIP() const; //Returns the value of HideConnectIP
    inline void SetHideConnectIP(bool value); //Sets the value of the HideConnectIP property

    /*
    Property HttpPort

    property HttpPort

    */
    inline int HttpPort() const; //Returns the value of HttpPort
    inline void SetHttpPort(int value); //Sets the value of the HttpPort property

    /*
    Property IgnoreBorder

    property IgnoreBorder

    */
    inline bool IgnoreBorder() const; //Returns the value of IgnoreBorder
    inline void SetIgnoreBorder(bool value); //Sets the value of the IgnoreBorder property

    /*
    Property IgnoreCaption

    property IgnoreCaption

    */
    inline bool IgnoreCaption() const; //Returns the value of IgnoreCaption
    inline void SetIgnoreCaption(bool value); //Sets the value of the IgnoreCaption property

    /*
    Property IgnoreSSLCertificate

    property IgnoreSSLCertificate

    */
    inline bool IgnoreSSLCertificate() const; //Returns the value of IgnoreSSLCertificate
    inline void SetIgnoreSSLCertificate(bool value); //Sets the value of the IgnoreSSLCertificate property

    /*
    Property IndexSize

    property IndexSize

    */
    inline int IndexSize() const; //Returns the value of IndexSize
    inline void SetIndexSize(int value); //Sets the value of the IndexSize property

    /*
    Property IsRecording

    property IsRecording

    */
    inline bool IsRecording() const; //Returns the value of IsRecording

    /*
    Property JoystickPanSpeedLvs

    property JoystickPanSpeedLvs

    */
    inline int JoystickPanSpeedLvs() const; //Returns the value of JoystickPanSpeedLvs
    inline void SetJoystickPanSpeedLvs(int value); //Sets the value of the JoystickPanSpeedLvs property

    /*
    Property JoystickSpeedLvs

    property JoystickSpeedLvs

    */
    inline int JoystickSpeedLvs() const; //Returns the value of JoystickSpeedLvs
    inline void SetJoystickSpeedLvs(int value); //Sets the value of the JoystickSpeedLvs property

    /*
    Property JoystickSpeedPercentage

    property JoystickSpeedPercentage

    */
    inline int JoystickSpeedPercentage() const; //Returns the value of JoystickSpeedPercentage
    inline void SetJoystickSpeedPercentage(int value); //Sets the value of the JoystickSpeedPercentage property

    /*
    Property JoystickTiltSpeedLvs

    property JoystickTiltSpeedLvs

    */
    inline int JoystickTiltSpeedLvs() const; //Returns the value of JoystickTiltSpeedLvs
    inline void SetJoystickTiltSpeedLvs(int value); //Sets the value of the JoystickTiltSpeedLvs property

    /*
    Property JoystickZoomSpeedLvs

    property JoystickZoomSpeedLvs

    */
    inline int JoystickZoomSpeedLvs() const; //Returns the value of JoystickZoomSpeedLvs
    inline void SetJoystickZoomSpeedLvs(int value); //Sets the value of the JoystickZoomSpeedLvs property

    /*
    Property JpegQuality

    property JpegQuality

    */
    inline int JpegQuality() const; //Returns the value of JpegQuality
    inline void SetJpegQuality(int value); //Sets the value of the JpegQuality property

    /*
    Property JpegSecsPerFrame

    property JpegSecsPerFrame

    */
    inline int JpegSecsPerFrame() const; //Returns the value of JpegSecsPerFrame
    inline void SetJpegSecsPerFrame(int value); //Sets the value of the JpegSecsPerFrame property

    /*
    Property JpegURL

    property JpegURL

    */
    inline QString JpegURL() const; //Returns the value of JpegURL
    inline void SetJpegURL(const QString& value); //Sets the value of the JpegURL property

    /*
    Property Language

    property Language

    */
    inline QString Language() const; //Returns the value of Language
    inline void SetLanguage(const QString& value); //Sets the value of the Language property

    /*
    Property LeftTitleSpace

    property LeftTitleSpace

    */
    inline int LeftTitleSpace() const; //Returns the value of LeftTitleSpace
    inline void SetLeftTitleSpace(int value); //Sets the value of the LeftTitleSpace property

    /*
    Property Location

    property Location

    */
    inline QString Location() const; //Returns the value of Location

    /*
    Property MDEditMode

    property MDEditMode

    */
    inline bool MDEditMode() const; //Returns the value of MDEditMode
    inline void SetMDEditMode(bool value); //Sets the value of the MDEditMode property

    /*
    Property MP4Conversion

    property MP4Conversion

    */
    inline bool MP4Conversion() const; //Returns the value of MP4Conversion
    inline void SetMP4Conversion(bool value); //Sets the value of the MP4Conversion property

    /*
    Property MP4MaxFileSize

    property MP4MaxFileSize

    */
    inline int MP4MaxFileSize() const; //Returns the value of MP4MaxFileSize
    inline void SetMP4MaxFileSize(int value); //Sets the value of the MP4MaxFileSize property

    /*
    Property MP4MaxFileTime

    property MP4MaxFileTime

    */
    inline int MP4MaxFileTime() const; //Returns the value of MP4MaxFileTime
    inline void SetMP4MaxFileTime(int value); //Sets the value of the MP4MaxFileTime property

    /*
    Property MP4Path

    property MP4Path

    */
    inline QString MP4Path() const; //Returns the value of MP4Path
    inline void SetMP4Path(const QString& value); //Sets the value of the MP4Path property

    /*
    Property MP4Prefix

    property MP4Prefix

    */
    inline QString MP4Prefix() const; //Returns the value of MP4Prefix
    inline void SetMP4Prefix(const QString& value); //Sets the value of the MP4Prefix property

    /*
    Property MP4Status

    property MP4Status

    */
    inline VITAMINDECODERLib::EAVIRecordState MP4Status() const; //Returns the value of MP4Status

    /*
    Property MaxDigitalZoomFactor

    property MaxDigitalZoomFactor

    */
    inline int MaxDigitalZoomFactor() const; //Returns the value of MaxDigitalZoomFactor
    inline void SetMaxDigitalZoomFactor(int value); //Sets the value of the MaxDigitalZoomFactor property

    /*
    Property MaxFileSize

    property MaxFileSize

    */
    inline int MaxFileSize() const; //Returns the value of MaxFileSize
    inline void SetMaxFileSize(int value); //Sets the value of the MaxFileSize property

    /*
    Property MaxLocationSize

    property MaxLocationSize

    */
    inline int MaxLocationSize() const; //Returns the value of MaxLocationSize
    inline void SetMaxLocationSize(int value); //Sets the value of the MaxLocationSize property

    /*
    Property MaxReconnectionCount

    property MaxReconnectionCount

    */
    inline int MaxReconnectionCount() const; //Returns the value of MaxReconnectionCount
    inline void SetMaxReconnectionCount(int value); //Sets the value of the MaxReconnectionCount property

    /*
    Property MediaRecord

    property MediaRecord

    */
    inline bool MediaRecord() const; //Returns the value of MediaRecord

    /*
    Property MediaType

    property MediaType

    */
    inline VITAMINDECODERLib::EMediaType MediaType() const; //Returns the value of MediaType
    inline void SetMediaType(VITAMINDECODERLib::EMediaType value); //Sets the value of the MediaType property

    /*
    Property MicMute

    property MicMute

    */
    inline bool MicMute() const; //Returns the value of MicMute
    inline void SetMicMute(bool value); //Sets the value of the MicMute property

    /*
    Property MicVolume

    property MicVolume

    */
    inline int MicVolume() const; //Returns the value of MicVolume
    inline void SetMicVolume(int value); //Sets the value of the MicVolume property

    /*
    Property MirrorMaskaWnd

    property MirrorMaskaWnd

    */
    inline bool MirrorMaskaWnd() const; //Returns the value of MirrorMaskaWnd
    inline void SetMirrorMaskaWnd(bool value); //Sets the value of the MirrorMaskaWnd property

    /*
    Property NamePassOption

    property NamePassOption

    */
    inline bool NamePassOption() const; //Returns the value of NamePassOption
    inline void SetNamePassOption(bool value); //Sets the value of the NamePassOption property

    /*
    Property NotifyAudioPacket

    property NotifyAudioPacket

    */
    inline bool NotifyAudioPacket() const; //Returns the value of NotifyAudioPacket
    inline void SetNotifyAudioPacket(bool value); //Sets the value of the NotifyAudioPacket property

    /*
    Property NotifyImageFormat

    property NotifyImageFormat

    */
    inline VITAMINDECODERLib::EPictureFormat NotifyImageFormat() const; //Returns the value of NotifyImageFormat
    inline void SetNotifyImageFormat(VITAMINDECODERLib::EPictureFormat value); //Sets the value of the NotifyImageFormat property

    /*
    Property NotifyNewAudio

    property NotifyNewAudio

    */
    inline bool NotifyNewAudio() const; //Returns the value of NotifyNewAudio
    inline void SetNotifyNewAudio(bool value); //Sets the value of the NotifyNewAudio property

    /*
    Property NotifyVideoData

    property NotifyVideoData

    */
    inline bool NotifyVideoData() const; //Returns the value of NotifyVideoData
    inline void SetNotifyVideoData(bool value); //Sets the value of the NotifyVideoData property

    /*
    Property NotifyVideoPacket

    property NotifyVideoPacket

    */
    inline bool NotifyVideoPacket() const; //Returns the value of NotifyVideoPacket
    inline void SetNotifyVideoPacket(bool value); //Sets the value of the NotifyVideoPacket property

    /*
    Property PanelButtonStyle

    property PanelButtonStyle

    */
    inline VITAMINDECODERLib::EPanelBtnStyle PanelButtonStyle() const; //Returns the value of PanelButtonStyle
    inline void SetPanelButtonStyle(VITAMINDECODERLib::EPanelBtnStyle value); //Sets the value of the PanelButtonStyle property

    /*
    Property ParseIPFromUrl

    property ParseIPFromUrl

    */
    inline bool ParseIPFromUrl() const; //Returns the value of ParseIPFromUrl
    inline void SetParseIPFromUrl(bool value); //Sets the value of the ParseIPFromUrl property

    /*
    Property Password

    property Password

    */
    inline QString Password() const; //Returns the value of Password
    inline void SetPassword(const QString& value); //Sets the value of the Password property

    /*
    Property PlayMute

    property PlayMute

    */
    inline bool PlayMute() const; //Returns the value of PlayMute
    inline void SetPlayMute(bool value); //Sets the value of the PlayMute property

    /*
    Property PlayVolume

    property PlayVolume

    */
    inline int PlayVolume() const; //Returns the value of PlayVolume
    inline void SetPlayVolume(int value); //Sets the value of the PlayVolume property

    /*
    Property PostEventTime

    property PostEventTime

    */
    inline int PostEventTime() const; //Returns the value of PostEventTime
    inline void SetPostEventTime(int value); //Sets the value of the PostEventTime property

    /*
    Property PreBufferMemorySize

    property PreBufferMemorySize

    */
    inline int PreBufferMemorySize() const; //Returns the value of PreBufferMemorySize
    inline void SetPreBufferMemorySize(int value); //Sets the value of the PreBufferMemorySize property

    /*
    Property PreEventTime

    property PreEventTime

    */
    inline int PreEventTime() const; //Returns the value of PreEventTime
    inline void SetPreEventTime(int value); //Sets the value of the PreEventTime property

    /*
    Property PresetURL

    property PresetURL

    */
    inline QString PresetURL() const; //Returns the value of PresetURL
    inline void SetPresetURL(const QString& value); //Sets the value of the PresetURL property

    /*
    Property PtzURL

    property PtzURL

    */
    inline QString PtzURL() const; //Returns the value of PtzURL
    inline void SetPtzURL(const QString& value); //Sets the value of the PtzURL property

    /*
    Property RTSPProxyAddress

    property RTSPProxyAddress

    */
    inline QString RTSPProxyAddress() const; //Returns the value of RTSPProxyAddress
    inline void SetRTSPProxyAddress(const QString& value); //Sets the value of the RTSPProxyAddress property

    /*
    Property RTSPProxyPort

    property RTSPProxyPort

    */
    inline int RTSPProxyPort() const; //Returns the value of RTSPProxyPort
    inline void SetRTSPProxyPort(int value); //Sets the value of the RTSPProxyPort property

    /*
    Property ReadSettingByParam

    property ReadSettingByParam

    */
    inline bool ReadSettingByParam() const; //Returns the value of ReadSettingByParam
    inline void SetReadSettingByParam(bool value); //Sets the value of the ReadSettingByParam property

    /*
    Property ReadWriteTimeout

    property ReadWriteTimeout

    */
    inline int ReadWriteTimeout() const; //Returns the value of ReadWriteTimeout
    inline void SetReadWriteTimeout(int value); //Sets the value of the ReadWriteTimeout property

    /*
    Property RecallURL

    property RecallURL

    */
    inline QString RecallURL() const; //Returns the value of RecallURL
    inline void SetRecallURL(const QString& value); //Sets the value of the RecallURL property

    /*
    Property ReconnectionWait

    property ReconnectionWait

    */
    inline int ReconnectionWait() const; //Returns the value of ReconnectionWait
    inline void SetReconnectionWait(int value); //Sets the value of the ReconnectionWait property

    /*
    Property RegSubKey

    property RegSubKey

    */
    inline QString RegSubKey() const; //Returns the value of RegSubKey
    inline void SetRegSubKey(const QString& value); //Sets the value of the RegSubKey property

    /*
    Property RegkeyRoot

    property RegkeyRoot

    */
    inline VITAMINDECODERLib::ERegistryRoot RegkeyRoot() const; //Returns the value of RegkeyRoot
    inline void SetRegkeyRoot(VITAMINDECODERLib::ERegistryRoot value); //Sets the value of the RegkeyRoot property

    /*
    Property RemoteIDStr

    property RemoteIDStr

    */
    inline QString RemoteIDStr() const; //Returns the value of RemoteIDStr
    inline void SetRemoteIDStr(const QString& value); //Sets the value of the RemoteIDStr property

    /*
    Property RemoteIPAddr

    property RemoteIPAddr

    */
    inline QString RemoteIPAddr() const; //Returns the value of RemoteIPAddr
    inline void SetRemoteIPAddr(const QString& value); //Sets the value of the RemoteIPAddr property

    /*
    Property RightTitleSpace

    property RightTitleSpace

    */
    inline int RightTitleSpace() const; //Returns the value of RightTitleSpace
    inline void SetRightTitleSpace(int value); //Sets the value of the RightTitleSpace property

    /*
    Property SVCTDecodeLevel

    property SVCTDecodeLevel

    */
    inline int SVCTDecodeLevel() const; //Returns the value of SVCTDecodeLevel
    inline void SetSVCTDecodeLevel(int value); //Sets the value of the SVCTDecodeLevel property

    /*
    Property SVCTFrameInterval

    property SVCTFrameInterval

    */
    inline int SVCTFrameInterval() const; //Returns the value of SVCTFrameInterval
    inline void SetSVCTFrameInterval(int value); //Sets the value of the SVCTFrameInterval property

    /*
    Property SVCTFrameLevel

    property SVCTFrameLevel

    */
    inline int SVCTFrameLevel() const; //Returns the value of SVCTFrameLevel
    inline void SetSVCTFrameLevel(int value); //Sets the value of the SVCTFrameLevel property

    /*
    Property ServerModelType

    property ServerModelType

    */
    inline VITAMINDECODERLib::EServerModelType ServerModelType() const; //Returns the value of ServerModelType
    inline void SetServerModelType(VITAMINDECODERLib::EServerModelType value); //Sets the value of the ServerModelType property

    /*
    Property SetMD

    property SetMD

    */
    inline QString SetMD() const; //Returns the value of SetMD
    inline void SetSetMD(const QString& value); //Sets the value of the SetMD property

    /*
    Property SetMDParmUrl

    property SetMDParmUrl

    */
    inline QString SetMDParmUrl() const; //Returns the value of SetMDParmUrl
    inline void SetSetMDParmUrl(const QString& value); //Sets the value of the SetMDParmUrl property

    /*
    Property SetMaskEditParmUrl

    property SetMaskEditParmUrl

    */
    inline QString SetMaskEditParmUrl() const; //Returns the value of SetMaskEditParmUrl
    inline void SetSetMaskEditParmUrl(const QString& value); //Sets the value of the SetMaskEditParmUrl property

    /*
    Property SnapshotUrl

    property SnapshotUrl

    */
    inline QString SnapshotUrl() const; //Returns the value of SnapshotUrl

    /*
    Property StreamingBufferTime

    property StreamingBufferTime

    */
    inline int StreamingBufferTime() const; //Returns the value of StreamingBufferTime
    inline void SetStreamingBufferTime(int value); //Sets the value of the StreamingBufferTime property

    /*
    Property StreamingOption

    property StreamingOption

    */
    inline VITAMINDECODERLib::EStreamingOption StreamingOption() const; //Returns the value of StreamingOption
    inline void SetStreamingOption(VITAMINDECODERLib::EStreamingOption value); //Sets the value of the StreamingOption property

    /*
    Property Stretch

    property Stretch

    */
    inline bool Stretch() const; //Returns the value of Stretch
    inline void SetStretch(bool value); //Sets the value of the Stretch property

    /*
    Property StretchFullScreen

    property StretchFullScreen

    */
    inline bool StretchFullScreen() const; //Returns the value of StretchFullScreen
    inline void SetStretchFullScreen(bool value); //Sets the value of the StretchFullScreen property

    /*
    Property TalkButtonStyle

    property TalkButtonStyle

    */
    inline VITAMINDECODERLib::ETalkBtnStyle TalkButtonStyle() const; //Returns the value of TalkButtonStyle
    inline void SetTalkButtonStyle(VITAMINDECODERLib::ETalkBtnStyle value); //Sets the value of the TalkButtonStyle property

    /*
    Property TextOnVideo

    property TextOnVideo

    */
    inline QString TextOnVideo() const; //Returns the value of TextOnVideo

    /*
    Property TitleBarColor

    property TitleBarColor

    */
    inline QColor TitleBarColor() const; //Returns the value of TitleBarColor
    inline void SetTitleBarColor(const QColor& value); //Sets the value of the TitleBarColor property

    /*
    Property TitleTextColor

    property TitleTextColor

    */
    inline QColor TitleTextColor() const; //Returns the value of TitleTextColor
    inline void SetTitleTextColor(const QColor& value); //Sets the value of the TitleTextColor property

    /*
    Property UartURL

    property UartURL

    */
    inline QString UartURL() const; //Returns the value of UartURL
    inline void SetUartURL(const QString& value); //Sets the value of the UartURL property

    /*
    Property UpdateJoystickInterval

    property UpdateJoystickInterval

    */
    inline int UpdateJoystickInterval() const; //Returns the value of UpdateJoystickInterval
    inline void SetUpdateJoystickInterval(int value); //Sets the value of the UpdateJoystickInterval property

    /*
    Property Url

    property Url

    */
    inline QString Url() const; //Returns the value of Url
    inline void SetUrl(const QString& value); //Sets the value of the Url property

    /*
    Property Url2

    property Url2

    */
    inline QString Url2() const; //Returns the value of Url2
    inline void SetUrl2(const QString& value); //Sets the value of the Url2 property

    /*
    Property UserDateFormat

    property UserDateFormat

    */
    inline bool UserDateFormat() const; //Returns the value of UserDateFormat
    inline void SetUserDateFormat(bool value); //Sets the value of the UserDateFormat property

    /*
    Property UserName

    property UserName

    */
    inline QString UserName() const; //Returns the value of UserName
    inline void SetUserName(const QString& value); //Sets the value of the UserName property

    /*
    Property VideoBitRate

    property VideoBitRate

    */
    inline int VideoBitRate() const; //Returns the value of VideoBitRate

    /*
    Property VideoQuality2K

    property VideoQuality2K

    */
    inline VITAMINDECODERLib::EVideoQuality2K VideoQuality2K() const; //Returns the value of VideoQuality2K
    inline void SetVideoQuality2K(VITAMINDECODERLib::EVideoQuality2K value); //Sets the value of the VideoQuality2K property

    /*
    Property VideoSize2K

    property VideoSize2K

    */
    inline VITAMINDECODERLib::EVideoSize2K VideoSize2K() const; //Returns the value of VideoSize2K
    inline void SetVideoSize2K(VITAMINDECODERLib::EVideoSize2K value); //Sets the value of the VideoSize2K property

    /*
    Property ViewStream

    property ViewStream

    */
    inline VITAMINDECODERLib::EDualStreamOption ViewStream() const; //Returns the value of ViewStream
    inline void SetViewStream(VITAMINDECODERLib::EDualStreamOption value); //Sets the value of the ViewStream property

    /*
    Property WheelEventHandler

    property WheelEventHandler

    */
    inline bool WheelEventHandler() const; //Returns the value of WheelEventHandler
    inline void SetWheelEventHandler(bool value); //Sets the value of the WheelEventHandler property

    /*
    Method ChooseAVIAudioCompressor

    method ChooseAVIAudioCompressor

    */
    inline int ChooseAVIAudioCompressor(const QString& bstrDialogTitle);

    /*
    Method ChooseAVIVideoCompressor

    method ChooseAVIVideoCompressor

    */
    inline int ChooseAVIVideoCompressor(const QString& bstrDialogTitle);

    /*
    Method ClearAvSyncChannel

    method ClearAvSyncChannel

    */
    inline void ClearAvSyncChannel();

    /*
    Method CloseConnect

    method CloseConnect

    */
    inline void CloseConnect();

    /*
    Method Connect

    method Connect

    */
    inline int Connect();

    /*
    Method DelPresetPosition

    method DelPresetPosition

    */
    inline int DelPresetPosition(const QString& bstrPosition);

    /*
    Method Disconnect

    method Disconnect

    */
    inline void Disconnect();

    /*
    Method DisplayStringOnVideo

    method DisplayStringOnVideo

    */
    inline int DisplayStringOnVideo(const QString& strText, int lFontSize, VITAMINDECODERLib::EFontStyle EFontStyle, int lX, int lY, int lFontColorR, int lFontColorG, int lFontColorB, int lOutlineColorR, int lOutlineColorG, int lOutlineColorB);

    /*
    Method EnglishString

    property EnglishString

    */
    inline QString EnglishString(int lIndex);

    /*
    Method FishEyeAddPresetInfoToList

    method FishEyeAddPresetInfoToList

    */
    inline int FishEyeAddPresetInfoToList(int lX, int lY, int lZ, int lZFactor, int lScroll);

    /*
    Method FishEyeCtrl

    method FishEyeCtrl

    */
    inline int FishEyeCtrl(VITAMINDECODERLib::EFishEyeControl eCtrlType, const QString& strCtrlMove, int lSpeed);

    /*
    Method FishEyeGetPresetInfo

    method FishEyeGetPresetInfo

    */
    inline int FishEyeGetPresetInfo();

    /*
    Method FishEyeGoPreset

    method FishEyeGoPreset

    */
    inline int FishEyeGoPreset(int lX, int lY, int lZ, int lZFactor, int lScroll);

    /*
    Method FishEyeRegionAspectRatio

    method FishEyeRegionAspectRatio

    */
    inline int FishEyeRegionAspectRatio(int lAspectRatioW, int lAspectRatioH);

    /*
    Method FishEyeRemovePresetInfoFromList

    method FishEyeRemovePresetInfoFromList

    */
    inline int FishEyeRemovePresetInfoFromList(int lX, int lY, int lZ, int lZFactor, int lScroll);

    /*
    Method FishEyeResetPresetList

    method FishEyeResetPresetList

    */
    inline int FishEyeResetPresetList();

    /*
    Method GetConnectionStatus

    method GetConnectionStatus

    */
    inline int GetConnectionStatus(QVariant& pvData);

    /*
    Method GetDigitalIn

    method GetDigitalIn

    */
    inline int GetDigitalIn(int lPort, QVariant& plData);

    /*
    Method GetPtzPresetPosition

    method GetPtzPresetPosition

    */
    inline int GetPtzPresetPosition(QVariant& pvData);

    /*
    Method GetSnapshot

    method GetSnapshot

    */
    inline int GetSnapshot(VITAMINDECODERLib::EPictureFormat eFormat, QVariant& pvData, QVariant& pvInfo);

    /*
    Method GetUartData

    method GetUartData

    */
    inline int GetUartData(QVariant& pbstrData, int lReadLen);

    /*
    Method GetUartData

    method GetUartData

    */
    inline int GetUartData(QVariant& pbstrData, int lReadLen, int lPort);

    /*
    Method GetUartData

    method GetUartData

    */
    inline int GetUartData(QVariant& pbstrData, int lReadLen, int lPort, int lTimeout);

    /*
    Method GetUartDataBinary

    method GetUartDataBinary

    */
    inline int GetUartDataBinary(QVariant& pvData, int lReadLen);

    /*
    Method GetUartDataBinary

    method GetUartDataBinary

    */
    inline int GetUartDataBinary(QVariant& pvData, int lReadLen, int lPort);

    /*
    Method GetUartDataBinary

    method GetUartDataBinary

    */
    inline int GetUartDataBinary(QVariant& pvData, int lReadLen, int lPort, int lTimeout);

    /*
    Method HttpCommand

    method HttpCommand

    */
    inline int HttpCommand(const QString& strUrlCommand, bool bPost, bool bReadData, QVariant& strRetData);

    /*
    Method InputMediaPacket

    method InputMediaPacket

    */
    inline int InputMediaPacket(int lLength, QVariant& pvPacket);

    /*
    Method InputMediaPacketX

    method InputMediaPacketX

    */
    inline int InputMediaPacketX(int lLength, int lDataPtr);

    /*
    Method OpenAudioRecorder

    method OpenAudioRecorder

    */
    inline void OpenAudioRecorder();

    /*
    Method OpenDigitalZoomEditWnd

    method OpenDigitalZoomEditWnd

    */
    inline int OpenDigitalZoomEditWnd();

    /*
    Method OpenMicVolumeEditWnd

    method OpenMicVolumeEditWnd

    */
    inline int OpenMicVolumeEditWnd();

    /*
    Method OpenVolumeEditWnd

    method OpenVolumeEditWnd

    */
    inline int OpenVolumeEditWnd();

    /*
    Method RecallPtzPosition

    method RecallPtzPosition

    */
    inline int RecallPtzPosition(const QString& bstrPos);

    /*
    Method RefreshServerConfig

    method RefreshServerConfig

    */
    inline int RefreshServerConfig();

    /*
    Method RepairDatabase

    method RepairDatabase

    */
    inline int RepairDatabase(const QString& bstrDatabase);

    /*
    Method RepairLocation

    method RepairLocation

    */
    inline int RepairLocation(const QString& bstrLocation);

    /*
    Method RestoreControlHandle

    method RestoreControlHandle

    */
    inline int RestoreControlHandle();

    /*
    Method RtspPause

    method RtspPause

    */
    inline int RtspPause();

    /*
    Method RtspPlay

    method RtspPlay

    */
    inline int RtspPlay();

    /*
    Method RtspStop

    method RtspStop

    */
    inline int RtspStop();

    /*
    Method SavePresetPosition

    method SavePresetPosition

    */
    inline int SavePresetPosition(const QString& bstrPosition);

    /*
    Method SaveSendMail

    method SaveSendMail

    */
    inline int SaveSendMail(VITAMINDECODERLib::EPictureFormat nType, const QString& bstrSendTo);

    /*
    Method SaveSnapshot

    method SaveSnapshot

    */
    inline int SaveSnapshot(VITAMINDECODERLib::EPictureFormat eFormat, const QString& bstrFileName);

    /*
    Method SendCameraCommand

    method SendCameraCommand

    */
    inline int SendCameraCommand(const QString& bstrCMD);

    /*
    Method SendCameraCommand

    method SendCameraCommand

    */
    inline int SendCameraCommand(const QString& bstrCMD, int lTimeout);

    /*
    Method SendCameraCommandMap

    method SendCameraCommandMap

    */
    inline int SendCameraCommandMap(int lX, int lY);

    /*
    Method SendCameraControlSpeed

    method SendCameraControlSpeed

    */
    inline int SendCameraControlSpeed(VITAMINDECODERLib::ESpeedType eType, int lSpeed);

    /*
    Method SendDigitalOut

    method SendDigitalOut

    */
    inline int SendDigitalOut(int lPort, int lValue);

    /*
    Method SendUartCommand

    method SendUartCommand

    */
    inline int SendUartCommand(const QString& bstrCMD);

    /*
    Method SendUartCommand

    method SendUartCommand

    */
    inline int SendUartCommand(const QString& bstrCMD, bool bFlush);

    /*
    Method SendUartCommand

    method SendUartCommand

    */
    inline int SendUartCommand(const QString& bstrCMD, bool bFlush, int lPort);

    /*
    Method SendUartCommandBinary

    method SendUartCommandBinary

    */
    inline int SendUartCommandBinary(const QVariant& vData);

    /*
    Method SendUartCommandBinary

    method SendUartCommandBinary

    */
    inline int SendUartCommandBinary(const QVariant& vData, bool bFlush);

    /*
    Method SendUartCommandBinary

    method SendUartCommandBinary

    */
    inline int SendUartCommandBinary(const QVariant& vData, bool bFlush, int lPort);

    /*
    Method ServerConfig

    property ServerConfig

    */
    inline QString ServerConfig(int lCfgIndex, int lExtraIdx);

    /*
    Method ServerConfigEntry

    property ServerConfigEntry

    */
    inline QString ServerConfigEntry(int lCfgIndex);

    /*
    Method ServerConfigSection

    property ServerConfigSection

    */
    inline QString ServerConfigSection(int lCfgIndex);

    /*
    Method SetBitmapHandle

    method SetBitmapHandle

    */
    inline int SetBitmapHandle(int lBitmapHandle);

    /*
    Method SetDatabasePath

    method SetDatabasePath

    */
    inline int SetDatabasePath(const QString& newVal, bool bAutoCreate);

    /*
    Method SetFullScreen

    method SetFullScreen

    */
    inline int SetFullScreen(bool bFullScreen);

    /*
    Method SetGivenLangInfo

    method SetGivenLangInfo

    */
    inline int SetGivenLangInfo(int lCodePage, int lFontSize, int lCharSet, bool bPitch, bool bSwiss, const QString& strFontName);

    /*
    Method SetLangString

    method SetLangString

    */
    inline int SetLangString(int lIndex, const QString& strUnicode);

    /*
    Method SetLangStringHex

    method SetLangStringHex

    */
    inline int SetLangStringHex(int lIndex, const QString& strValue);

    /*
    Method SetLocation

    method SetLocation

    */
    inline int SetLocation(const QString& bstrLocation, bool bAutoCreate);

    /*
    Method SetServerConfig

    method SetServerConfig

    */
    inline int SetServerConfig(int lCfgIndex, int lExtraIdx, const QString& bstrValue);

    /*
    Method SetServerDateTime

    method SetServerDateTime

    */
    inline int SetServerDateTime(const QString& bstrDate, const QString& bstrTime);

    /*
    Method StartAVIConversion

    method StartAVIConversion

    */
    inline int StartAVIConversion();

    /*
    Method StartMP4Conversion

    method StartMP4Conversion

    */
    inline int StartMP4Conversion();

    /*
    Method StartMediaRecord

    method StartMediaRecord

    */
    inline int StartMediaRecord(VITAMINDECODERLib::EMediaType EMediaType);

    /*
    Method StartMediaRecordEx

    method StartMediaRecordEx

    */
    inline int StartMediaRecordEx(VITAMINDECODERLib::EMediaType EMediaType, bool bEventRecord);

    /*
    Method StartMicTalk

    method StartMicTalk

    */
    inline int StartMicTalk();

    /*
    Method StartPacketInput

    method StartPacketInput

    */
    inline int StartPacketInput(VITAMINDECODERLib::EMediaType EMediaType);

    /*
    Method StopAVIConversion

    method StopAVIConversion

    */
    inline int StopAVIConversion();

    /*
    Method StopMP4Conversion

    method StopMP4Conversion

    */
    inline int StopMP4Conversion();

    /*
    Method StopMediaRecord

    method StopMediaRecord

    */
    inline int StopMediaRecord();

    /*
    Method StopMicTalk

    method StopMicTalk

    */
    inline int StopMicTalk();

    /*
    Method StopPacketInput

    method StopPacketInput

    */
    inline int StopPacketInput();

    /*
    Method UpdateServerConfig

    method UpdateServerConfig

    */
    inline int UpdateServerConfig();

    /*
    Method hiddenFunction

    method hiddenFunction

    */
    inline void hiddenFunction(VITAMINDECODERLib::EDBRecordEventType eEventType, VITAMINDECODERLib::EDBStatusCode eStatusCode, VITAMINDECODERLib::EPTZEnableFlag ePtz, VITAMINDECODERLib::EServerConfig eCfg, VITAMINDECODERLib::EAVIRecordState eRec, VITAMINDECODERLib::EControlButtonState eState);

};

// member function implementation
#ifndef QAX_DUMPCPP_VITAMINDECODERLIB_NOINLINES
inline QString VitaminCtrl::AVIFilePathName() const
{
    QVariant qax_result = property("AVIFilePathName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIFilePathName(const QString& value){ setProperty("AVIFilePathName", QVariant(value)); }

inline bool VitaminCtrl::AVIManualNaming() const
{
    QVariant qax_result = property("AVIManualNaming");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIManualNaming(bool value){ setProperty("AVIManualNaming", QVariant(value)); }

inline int VitaminCtrl::AVIMaxFileSize() const
{
    QVariant qax_result = property("AVIMaxFileSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIMaxFileSize(int value){ setProperty("AVIMaxFileSize", QVariant(value)); }

inline int VitaminCtrl::AVIMaxFileTimeLength() const
{
    QVariant qax_result = property("AVIMaxFileTimeLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIMaxFileTimeLength(int value){ setProperty("AVIMaxFileTimeLength", QVariant(value)); }

inline QString VitaminCtrl::AVIPath() const
{
    QVariant qax_result = property("AVIPath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIPath(const QString& value){ setProperty("AVIPath", QVariant(value)); }

inline int VitaminCtrl::AVIRecordTimeout() const
{
    QVariant qax_result = property("AVIRecordTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIRecordTimeout(int value){ setProperty("AVIRecordTimeout", QVariant(value)); }

inline VITAMINDECODERLib::EAVIRecordState VitaminCtrl::AVIStatus() const
{
    QVariant qax_result = property("AVIStatus");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EAVIRecordState*)qax_result.constData();
}

inline int VitaminCtrl::AVIVideoFrameRate() const
{
    QVariant qax_result = property("AVIVideoFrameRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIVideoFrameRate(int value){ setProperty("AVIVideoFrameRate", QVariant(value)); }

inline int VitaminCtrl::AVIVideoHeight() const
{
    QVariant qax_result = property("AVIVideoHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIVideoHeight(int value){ setProperty("AVIVideoHeight", QVariant(value)); }

inline bool VitaminCtrl::AVIVideoSizeByStream() const
{
    QVariant qax_result = property("AVIVideoSizeByStream");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIVideoSizeByStream(bool value){ setProperty("AVIVideoSizeByStream", QVariant(value)); }

inline int VitaminCtrl::AVIVideoWidth() const
{
    QVariant qax_result = property("AVIVideoWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetAVIVideoWidth(int value){ setProperty("AVIVideoWidth", QVariant(value)); }

inline bool VitaminCtrl::AntiTearing() const
{
    QVariant qax_result = property("AntiTearing");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetAntiTearing(bool value){ setProperty("AntiTearing", QVariant(value)); }

inline int VitaminCtrl::AudioBitRate() const
{
    QVariant qax_result = property("AudioBitRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool VitaminCtrl::AutoAVISettings() const
{
    QVariant qax_result = property("AutoAVISettings");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetAutoAVISettings(bool value){ setProperty("AutoAVISettings", QVariant(value)); }

inline bool VitaminCtrl::AutoReconnect() const
{
    QVariant qax_result = property("AutoReconnect");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetAutoReconnect(bool value){ setProperty("AutoReconnect", QVariant(value)); }

inline bool VitaminCtrl::AutoServerModelType() const
{
    QVariant qax_result = property("AutoServerModelType");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetAutoServerModelType(bool value){ setProperty("AutoServerModelType", QVariant(value)); }

inline bool VitaminCtrl::AutoStartConnection() const
{
    QVariant qax_result = property("AutoStartConnection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetAutoStartConnection(bool value){ setProperty("AutoStartConnection", QVariant(value)); }

inline bool VitaminCtrl::BeRightClickEventHandler() const
{
    QVariant qax_result = property("BeRightClickEventHandler");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetBeRightClickEventHandler(bool value){ setProperty("BeRightClickEventHandler", QVariant(value)); }

inline QString VitaminCtrl::BitmapFile() const
{
    QVariant qax_result = property("BitmapFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetBitmapFile(const QString& value){ setProperty("BitmapFile", QVariant(value)); }

inline VITAMINDECODERLib::EFishEyePresentMode VitaminCtrl::ChangePresentMode() const
{
    QVariant qax_result = property("ChangePresentMode");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EFishEyePresentMode*)qax_result.constData();
}
inline void VitaminCtrl::SetChangePresentMode(VITAMINDECODERLib::EFishEyePresentMode value){ setProperty("ChangePresentMode", QVariant(value)); }

inline bool VitaminCtrl::CircularMode() const
{
    QVariant qax_result = property("CircularMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetCircularMode(bool value){ setProperty("CircularMode", QVariant(value)); }

inline VITAMINDECODERLib::EClickEventHandler VitaminCtrl::ClickEventHandler() const
{
    QVariant qax_result = property("ClickEventHandler");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EClickEventHandler*)qax_result.constData();
}
inline void VitaminCtrl::SetClickEventHandler(VITAMINDECODERLib::EClickEventHandler value){ setProperty("ClickEventHandler", QVariant(value)); }

inline VITAMINDECODERLib::EConnProtocol VitaminCtrl::ConnectionProtocol() const
{
    QVariant qax_result = property("ConnectionProtocol");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EConnProtocol*)qax_result.constData();
}
inline void VitaminCtrl::SetConnectionProtocol(VITAMINDECODERLib::EConnProtocol value){ setProperty("ConnectionProtocol", QVariant(value)); }

inline int VitaminCtrl::ConnectionTimeout() const
{
    QVariant qax_result = property("ConnectionTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetConnectionTimeout(int value){ setProperty("ConnectionTimeout", QVariant(value)); }

inline int VitaminCtrl::ControlButtonOpts() const
{
    QVariant qax_result = property("ControlButtonOpts");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetControlButtonOpts(int value){ setProperty("ControlButtonOpts", QVariant(value)); }

inline int VitaminCtrl::ControlID() const
{
    QVariant qax_result = property("ControlID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetControlID(int value){ setProperty("ControlID", QVariant(value)); }

inline int VitaminCtrl::ControlPort() const
{
    QVariant qax_result = property("ControlPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetControlPort(int value){ setProperty("ControlPort", QVariant(value)); }

inline VITAMINDECODERLib::EControlStatus VitaminCtrl::ControlStatus() const
{
    QVariant qax_result = property("ControlStatus");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EControlStatus*)qax_result.constData();
}

inline VITAMINDECODERLib::EControlType VitaminCtrl::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EControlType*)qax_result.constData();
}
inline void VitaminCtrl::SetControlType(VITAMINDECODERLib::EControlType value){ setProperty("ControlType", QVariant(value)); }

inline QString VitaminCtrl::ControlVersion() const
{
    QVariant qax_result = property("ControlVersion");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline VITAMINDECODERLib::EAudioCodecType VitaminCtrl::CurrentAudioCodecType() const
{
    QVariant qax_result = property("CurrentAudioCodecType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EAudioCodecType*)qax_result.constData();
}

inline int VitaminCtrl::CurrentAudioPort() const
{
    QVariant qax_result = property("CurrentAudioPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int VitaminCtrl::CurrentControlCam() const
{
    QVariant qax_result = property("CurrentControlCam");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetCurrentControlCam(int value){ setProperty("CurrentControlCam", QVariant(value)); }

inline VITAMINDECODERLib::EMediaType VitaminCtrl::CurrentMediaType() const
{
    QVariant qax_result = property("CurrentMediaType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EMediaType*)qax_result.constData();
}

inline VITAMINDECODERLib::EConnProtocol VitaminCtrl::CurrentProtocol() const
{
    QVariant qax_result = property("CurrentProtocol");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EConnProtocol*)qax_result.constData();
}

inline VITAMINDECODERLib::EVideoCodecType VitaminCtrl::CurrentVideoCodecType() const
{
    QVariant qax_result = property("CurrentVideoCodecType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EVideoCodecType*)qax_result.constData();
}

inline int VitaminCtrl::CurrentVideoPort() const
{
    QVariant qax_result = property("CurrentVideoPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool VitaminCtrl::DBHierarchy() const
{
    QVariant qax_result = property("DBHierarchy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDBHierarchy(bool value){ setProperty("DBHierarchy", QVariant(value)); }

inline bool VitaminCtrl::DDrawOnePass() const
{
    QVariant qax_result = property("DDrawOnePass");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDDrawOnePass(bool value){ setProperty("DDrawOnePass", QVariant(value)); }

inline bool VitaminCtrl::DarwinConnection() const
{
    QVariant qax_result = property("DarwinConnection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDarwinConnection(bool value){ setProperty("DarwinConnection", QVariant(value)); }

inline QString VitaminCtrl::DarwinExtraPath() const
{
    QVariant qax_result = property("DarwinExtraPath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetDarwinExtraPath(const QString& value){ setProperty("DarwinExtraPath", QVariant(value)); }

inline QString VitaminCtrl::DatabasePath() const
{
    QVariant qax_result = property("DatabasePath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool VitaminCtrl::Deblocking() const
{
    QVariant qax_result = property("Deblocking");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDeblocking(bool value){ setProperty("Deblocking", QVariant(value)); }

inline bool VitaminCtrl::DecodeAV() const
{
    QVariant qax_result = property("DecodeAV");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDecodeAV(bool value){ setProperty("DecodeAV", QVariant(value)); }

inline bool VitaminCtrl::DecodeSnapshot() const
{
    QVariant qax_result = property("DecodeSnapshot");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDecodeSnapshot(bool value){ setProperty("DecodeSnapshot", QVariant(value)); }

inline bool VitaminCtrl::Deinterlace() const
{
    QVariant qax_result = property("Deinterlace");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDeinterlace(bool value){ setProperty("Deinterlace", QVariant(value)); }

inline QString VitaminCtrl::DigitalInURL() const
{
    QVariant qax_result = property("DigitalInURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetDigitalInURL(const QString& value){ setProperty("DigitalInURL", QVariant(value)); }

inline QString VitaminCtrl::DigitalOutURL() const
{
    QVariant qax_result = property("DigitalOutURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetDigitalOutURL(const QString& value){ setProperty("DigitalOutURL", QVariant(value)); }

inline bool VitaminCtrl::DigitalZoomEnableChk() const
{
    QVariant qax_result = property("DigitalZoomEnableChk");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDigitalZoomEnableChk(bool value){ setProperty("DigitalZoomEnableChk", QVariant(value)); }

inline bool VitaminCtrl::DigitalZoomEnabled() const
{
    QVariant qax_result = property("DigitalZoomEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDigitalZoomEnabled(bool value){ setProperty("DigitalZoomEnabled", QVariant(value)); }

inline int VitaminCtrl::DigitalZoomFactor() const
{
    QVariant qax_result = property("DigitalZoomFactor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetDigitalZoomFactor(int value){ setProperty("DigitalZoomFactor", QVariant(value)); }

inline int VitaminCtrl::DigitalZoomX() const
{
    QVariant qax_result = property("DigitalZoomX");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetDigitalZoomX(int value){ setProperty("DigitalZoomX", QVariant(value)); }

inline int VitaminCtrl::DigitalZoomY() const
{
    QVariant qax_result = property("DigitalZoomY");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetDigitalZoomY(int value){ setProperty("DigitalZoomY", QVariant(value)); }

inline bool VitaminCtrl::Display() const
{
    QVariant qax_result = property("Display");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDisplay(bool value){ setProperty("Display", QVariant(value)); }

inline bool VitaminCtrl::DisplayErrorMsg() const
{
    QVariant qax_result = property("DisplayErrorMsg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDisplayErrorMsg(bool value){ setProperty("DisplayErrorMsg", QVariant(value)); }

inline bool VitaminCtrl::DisplayLastImage() const
{
    QVariant qax_result = property("DisplayLastImage");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDisplayLastImage(bool value){ setProperty("DisplayLastImage", QVariant(value)); }

inline bool VitaminCtrl::DisplayMotionFrame() const
{
    QVariant qax_result = property("DisplayMotionFrame");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetDisplayMotionFrame(bool value){ setProperty("DisplayMotionFrame", QVariant(value)); }

inline int VitaminCtrl::DisplayPeriod() const
{
    QVariant qax_result = property("DisplayPeriod");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetDisplayPeriod(int value){ setProperty("DisplayPeriod", QVariant(value)); }

inline VITAMINDECODERLib::EDisplayTimeFormat VitaminCtrl::DisplayTimeFormat() const
{
    QVariant qax_result = property("DisplayTimeFormat");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EDisplayTimeFormat*)qax_result.constData();
}
inline void VitaminCtrl::SetDisplayTimeFormat(VITAMINDECODERLib::EDisplayTimeFormat value){ setProperty("DisplayTimeFormat", QVariant(value)); }

inline int VitaminCtrl::DrawHwnd() const
{
    QVariant qax_result = property("DrawHwnd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetDrawHwnd(int value){ setProperty("DrawHwnd", QVariant(value)); }

inline VITAMINDECODERLib::EServerModelType VitaminCtrl::EffectiveModelType() const
{
    QVariant qax_result = property("EffectiveModelType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EServerModelType*)qax_result.constData();
}

inline bool VitaminCtrl::EnableFishEye() const
{
    QVariant qax_result = property("EnableFishEye");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetEnableFishEye(bool value){ setProperty("EnableFishEye", QVariant(value)); }

inline bool VitaminCtrl::EnableJoystick() const
{
    QVariant qax_result = property("EnableJoystick");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetEnableJoystick(bool value){ setProperty("EnableJoystick", QVariant(value)); }

inline bool VitaminCtrl::EnableMD() const
{
    QVariant qax_result = property("EnableMD");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetEnableMD(bool value){ setProperty("EnableMD", QVariant(value)); }

inline bool VitaminCtrl::EnableMuteWhenTalk() const
{
    QVariant qax_result = property("EnableMuteWhenTalk");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetEnableMuteWhenTalk(bool value){ setProperty("EnableMuteWhenTalk", QVariant(value)); }

inline bool VitaminCtrl::EnableRTSPProxy() const
{
    QVariant qax_result = property("EnableRTSPProxy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetEnableRTSPProxy(bool value){ setProperty("EnableRTSPProxy", QVariant(value)); }

inline bool VitaminCtrl::EnableRecordingTime() const
{
    QVariant qax_result = property("EnableRecordingTime");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetEnableRecordingTime(bool value){ setProperty("EnableRecordingTime", QVariant(value)); }

inline bool VitaminCtrl::EnableSSL() const
{
    QVariant qax_result = property("EnableSSL");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetEnableSSL(bool value){ setProperty("EnableSSL", QVariant(value)); }

inline bool VitaminCtrl::EnableTwoWayAudio() const
{
    QVariant qax_result = property("EnableTwoWayAudio");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetEnableTwoWayAudio(bool value){ setProperty("EnableTwoWayAudio", QVariant(value)); }

inline int VitaminCtrl::EventTypes() const
{
    QVariant qax_result = property("EventTypes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetEventTypes(int value){ setProperty("EventTypes", QVariant(value)); }

inline bool VitaminCtrl::FileNameOfTime() const
{
    QVariant qax_result = property("FileNameOfTime");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetFileNameOfTime(bool value){ setProperty("FileNameOfTime", QVariant(value)); }

inline int VitaminCtrl::FishEyeAspectRatioHeight() const
{
    QVariant qax_result = property("FishEyeAspectRatioHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetFishEyeAspectRatioHeight(int value){ setProperty("FishEyeAspectRatioHeight", QVariant(value)); }

inline int VitaminCtrl::FishEyeAspectRatioWidth() const
{
    QVariant qax_result = property("FishEyeAspectRatioWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetFishEyeAspectRatioWidth(int value){ setProperty("FishEyeAspectRatioWidth", QVariant(value)); }

inline QString VitaminCtrl::FishEyeInitLocationInfo() const
{
    QVariant qax_result = property("FishEyeInitLocationInfo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetFishEyeInitLocationInfo(const QString& value){ setProperty("FishEyeInitLocationInfo", QVariant(value)); }

inline VITAMINDECODERLib::EFishEyeMountType VitaminCtrl::FishEyeMountType() const
{
    QVariant qax_result = property("FishEyeMountType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EFishEyeMountType*)qax_result.constData();
}
inline void VitaminCtrl::SetFishEyeMountType(VITAMINDECODERLib::EFishEyeMountType value){ setProperty("FishEyeMountType", QVariant(value)); }

inline bool VitaminCtrl::FlipMaskWnd() const
{
    QVariant qax_result = property("FlipMaskWnd");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetFlipMaskWnd(bool value){ setProperty("FlipMaskWnd", QVariant(value)); }

inline bool VitaminCtrl::ForceGDI() const
{
    QVariant qax_result = property("ForceGDI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetForceGDI(bool value){ setProperty("ForceGDI", QVariant(value)); }

inline bool VitaminCtrl::ForceNonYUV() const
{
    QVariant qax_result = property("ForceNonYUV");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetForceNonYUV(bool value){ setProperty("ForceNonYUV", QVariant(value)); }

inline int VitaminCtrl::FrameRate() const
{
    QVariant qax_result = property("FrameRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool VitaminCtrl::GDIUseStretchBlt() const
{
    QVariant qax_result = property("GDIUseStretchBlt");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetGDIUseStretchBlt(bool value){ setProperty("GDIUseStretchBlt", QVariant(value)); }

inline QString VitaminCtrl::GetMD() const
{
    QVariant qax_result = property("GetMD");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetGetMD(const QString& value){ setProperty("GetMD", QVariant(value)); }

inline QString VitaminCtrl::GetMDParmUrl() const
{
    QVariant qax_result = property("GetMDParmUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetGetMDParmUrl(const QString& value){ setProperty("GetMDParmUrl", QVariant(value)); }

inline QString VitaminCtrl::GetMaskEditParmUrl() const
{
    QVariant qax_result = property("GetMaskEditParmUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetGetMaskEditParmUrl(const QString& value){ setProperty("GetMaskEditParmUrl", QVariant(value)); }

inline QString VitaminCtrl::HTTPProxyAddress() const
{
    QVariant qax_result = property("HTTPProxyAddress");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetHTTPProxyAddress(const QString& value){ setProperty("HTTPProxyAddress", QVariant(value)); }

inline QString VitaminCtrl::HTTPProxyPassword() const
{
    QVariant qax_result = property("HTTPProxyPassword");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetHTTPProxyPassword(const QString& value){ setProperty("HTTPProxyPassword", QVariant(value)); }

inline int VitaminCtrl::HTTPProxyPort() const
{
    QVariant qax_result = property("HTTPProxyPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetHTTPProxyPort(int value){ setProperty("HTTPProxyPort", QVariant(value)); }

inline VITAMINDECODERLib::EHttpProxyType VitaminCtrl::HTTPProxyType() const
{
    QVariant qax_result = property("HTTPProxyType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EHttpProxyType*)qax_result.constData();
}
inline void VitaminCtrl::SetHTTPProxyType(VITAMINDECODERLib::EHttpProxyType value){ setProperty("HTTPProxyType", QVariant(value)); }

inline QString VitaminCtrl::HTTPProxyUserName() const
{
    QVariant qax_result = property("HTTPProxyUserName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetHTTPProxyUserName(const QString& value){ setProperty("HTTPProxyUserName", QVariant(value)); }

inline bool VitaminCtrl::HideConnectIP() const
{
    QVariant qax_result = property("HideConnectIP");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetHideConnectIP(bool value){ setProperty("HideConnectIP", QVariant(value)); }

inline int VitaminCtrl::HttpPort() const
{
    QVariant qax_result = property("HttpPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetHttpPort(int value){ setProperty("HttpPort", QVariant(value)); }

inline bool VitaminCtrl::IgnoreBorder() const
{
    QVariant qax_result = property("IgnoreBorder");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetIgnoreBorder(bool value){ setProperty("IgnoreBorder", QVariant(value)); }

inline bool VitaminCtrl::IgnoreCaption() const
{
    QVariant qax_result = property("IgnoreCaption");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetIgnoreCaption(bool value){ setProperty("IgnoreCaption", QVariant(value)); }

inline bool VitaminCtrl::IgnoreSSLCertificate() const
{
    QVariant qax_result = property("IgnoreSSLCertificate");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetIgnoreSSLCertificate(bool value){ setProperty("IgnoreSSLCertificate", QVariant(value)); }

inline int VitaminCtrl::IndexSize() const
{
    QVariant qax_result = property("IndexSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetIndexSize(int value){ setProperty("IndexSize", QVariant(value)); }

inline bool VitaminCtrl::IsRecording() const
{
    QVariant qax_result = property("IsRecording");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int VitaminCtrl::JoystickPanSpeedLvs() const
{
    QVariant qax_result = property("JoystickPanSpeedLvs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetJoystickPanSpeedLvs(int value){ setProperty("JoystickPanSpeedLvs", QVariant(value)); }

inline int VitaminCtrl::JoystickSpeedLvs() const
{
    QVariant qax_result = property("JoystickSpeedLvs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetJoystickSpeedLvs(int value){ setProperty("JoystickSpeedLvs", QVariant(value)); }

inline int VitaminCtrl::JoystickSpeedPercentage() const
{
    QVariant qax_result = property("JoystickSpeedPercentage");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetJoystickSpeedPercentage(int value){ setProperty("JoystickSpeedPercentage", QVariant(value)); }

inline int VitaminCtrl::JoystickTiltSpeedLvs() const
{
    QVariant qax_result = property("JoystickTiltSpeedLvs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetJoystickTiltSpeedLvs(int value){ setProperty("JoystickTiltSpeedLvs", QVariant(value)); }

inline int VitaminCtrl::JoystickZoomSpeedLvs() const
{
    QVariant qax_result = property("JoystickZoomSpeedLvs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetJoystickZoomSpeedLvs(int value){ setProperty("JoystickZoomSpeedLvs", QVariant(value)); }

inline int VitaminCtrl::JpegQuality() const
{
    QVariant qax_result = property("JpegQuality");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetJpegQuality(int value){ setProperty("JpegQuality", QVariant(value)); }

inline int VitaminCtrl::JpegSecsPerFrame() const
{
    QVariant qax_result = property("JpegSecsPerFrame");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetJpegSecsPerFrame(int value){ setProperty("JpegSecsPerFrame", QVariant(value)); }

inline QString VitaminCtrl::JpegURL() const
{
    QVariant qax_result = property("JpegURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetJpegURL(const QString& value){ setProperty("JpegURL", QVariant(value)); }

inline QString VitaminCtrl::Language() const
{
    QVariant qax_result = property("Language");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetLanguage(const QString& value){ setProperty("Language", QVariant(value)); }

inline int VitaminCtrl::LeftTitleSpace() const
{
    QVariant qax_result = property("LeftTitleSpace");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetLeftTitleSpace(int value){ setProperty("LeftTitleSpace", QVariant(value)); }

inline QString VitaminCtrl::Location() const
{
    QVariant qax_result = property("Location");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool VitaminCtrl::MDEditMode() const
{
    QVariant qax_result = property("MDEditMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetMDEditMode(bool value){ setProperty("MDEditMode", QVariant(value)); }

inline bool VitaminCtrl::MP4Conversion() const
{
    QVariant qax_result = property("MP4Conversion");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetMP4Conversion(bool value){ setProperty("MP4Conversion", QVariant(value)); }

inline int VitaminCtrl::MP4MaxFileSize() const
{
    QVariant qax_result = property("MP4MaxFileSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetMP4MaxFileSize(int value){ setProperty("MP4MaxFileSize", QVariant(value)); }

inline int VitaminCtrl::MP4MaxFileTime() const
{
    QVariant qax_result = property("MP4MaxFileTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetMP4MaxFileTime(int value){ setProperty("MP4MaxFileTime", QVariant(value)); }

inline QString VitaminCtrl::MP4Path() const
{
    QVariant qax_result = property("MP4Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetMP4Path(const QString& value){ setProperty("MP4Path", QVariant(value)); }

inline QString VitaminCtrl::MP4Prefix() const
{
    QVariant qax_result = property("MP4Prefix");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetMP4Prefix(const QString& value){ setProperty("MP4Prefix", QVariant(value)); }

inline VITAMINDECODERLib::EAVIRecordState VitaminCtrl::MP4Status() const
{
    QVariant qax_result = property("MP4Status");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EAVIRecordState*)qax_result.constData();
}

inline int VitaminCtrl::MaxDigitalZoomFactor() const
{
    QVariant qax_result = property("MaxDigitalZoomFactor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetMaxDigitalZoomFactor(int value){ setProperty("MaxDigitalZoomFactor", QVariant(value)); }

inline int VitaminCtrl::MaxFileSize() const
{
    QVariant qax_result = property("MaxFileSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetMaxFileSize(int value){ setProperty("MaxFileSize", QVariant(value)); }

inline int VitaminCtrl::MaxLocationSize() const
{
    QVariant qax_result = property("MaxLocationSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetMaxLocationSize(int value){ setProperty("MaxLocationSize", QVariant(value)); }

inline int VitaminCtrl::MaxReconnectionCount() const
{
    QVariant qax_result = property("MaxReconnectionCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetMaxReconnectionCount(int value){ setProperty("MaxReconnectionCount", QVariant(value)); }

inline bool VitaminCtrl::MediaRecord() const
{
    QVariant qax_result = property("MediaRecord");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline VITAMINDECODERLib::EMediaType VitaminCtrl::MediaType() const
{
    QVariant qax_result = property("MediaType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EMediaType*)qax_result.constData();
}
inline void VitaminCtrl::SetMediaType(VITAMINDECODERLib::EMediaType value){ setProperty("MediaType", QVariant(value)); }

inline bool VitaminCtrl::MicMute() const
{
    QVariant qax_result = property("MicMute");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetMicMute(bool value){ setProperty("MicMute", QVariant(value)); }

inline int VitaminCtrl::MicVolume() const
{
    QVariant qax_result = property("MicVolume");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetMicVolume(int value){ setProperty("MicVolume", QVariant(value)); }

inline bool VitaminCtrl::MirrorMaskaWnd() const
{
    QVariant qax_result = property("MirrorMaskaWnd");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetMirrorMaskaWnd(bool value){ setProperty("MirrorMaskaWnd", QVariant(value)); }

inline bool VitaminCtrl::NamePassOption() const
{
    QVariant qax_result = property("NamePassOption");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetNamePassOption(bool value){ setProperty("NamePassOption", QVariant(value)); }

inline bool VitaminCtrl::NotifyAudioPacket() const
{
    QVariant qax_result = property("NotifyAudioPacket");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetNotifyAudioPacket(bool value){ setProperty("NotifyAudioPacket", QVariant(value)); }

inline VITAMINDECODERLib::EPictureFormat VitaminCtrl::NotifyImageFormat() const
{
    QVariant qax_result = property("NotifyImageFormat");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EPictureFormat*)qax_result.constData();
}
inline void VitaminCtrl::SetNotifyImageFormat(VITAMINDECODERLib::EPictureFormat value){ setProperty("NotifyImageFormat", QVariant(value)); }

inline bool VitaminCtrl::NotifyNewAudio() const
{
    QVariant qax_result = property("NotifyNewAudio");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetNotifyNewAudio(bool value){ setProperty("NotifyNewAudio", QVariant(value)); }

inline bool VitaminCtrl::NotifyVideoData() const
{
    QVariant qax_result = property("NotifyVideoData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetNotifyVideoData(bool value){ setProperty("NotifyVideoData", QVariant(value)); }

inline bool VitaminCtrl::NotifyVideoPacket() const
{
    QVariant qax_result = property("NotifyVideoPacket");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetNotifyVideoPacket(bool value){ setProperty("NotifyVideoPacket", QVariant(value)); }

inline VITAMINDECODERLib::EPanelBtnStyle VitaminCtrl::PanelButtonStyle() const
{
    QVariant qax_result = property("PanelButtonStyle");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EPanelBtnStyle*)qax_result.constData();
}
inline void VitaminCtrl::SetPanelButtonStyle(VITAMINDECODERLib::EPanelBtnStyle value){ setProperty("PanelButtonStyle", QVariant(value)); }

inline bool VitaminCtrl::ParseIPFromUrl() const
{
    QVariant qax_result = property("ParseIPFromUrl");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetParseIPFromUrl(bool value){ setProperty("ParseIPFromUrl", QVariant(value)); }

inline QString VitaminCtrl::Password() const
{
    QVariant qax_result = property("Password");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetPassword(const QString& value){ setProperty("Password", QVariant(value)); }

inline bool VitaminCtrl::PlayMute() const
{
    QVariant qax_result = property("PlayMute");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetPlayMute(bool value){ setProperty("PlayMute", QVariant(value)); }

inline int VitaminCtrl::PlayVolume() const
{
    QVariant qax_result = property("PlayVolume");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetPlayVolume(int value){ setProperty("PlayVolume", QVariant(value)); }

inline int VitaminCtrl::PostEventTime() const
{
    QVariant qax_result = property("PostEventTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetPostEventTime(int value){ setProperty("PostEventTime", QVariant(value)); }

inline int VitaminCtrl::PreBufferMemorySize() const
{
    QVariant qax_result = property("PreBufferMemorySize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetPreBufferMemorySize(int value){ setProperty("PreBufferMemorySize", QVariant(value)); }

inline int VitaminCtrl::PreEventTime() const
{
    QVariant qax_result = property("PreEventTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetPreEventTime(int value){ setProperty("PreEventTime", QVariant(value)); }

inline QString VitaminCtrl::PresetURL() const
{
    QVariant qax_result = property("PresetURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetPresetURL(const QString& value){ setProperty("PresetURL", QVariant(value)); }

inline QString VitaminCtrl::PtzURL() const
{
    QVariant qax_result = property("PtzURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetPtzURL(const QString& value){ setProperty("PtzURL", QVariant(value)); }

inline QString VitaminCtrl::RTSPProxyAddress() const
{
    QVariant qax_result = property("RTSPProxyAddress");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetRTSPProxyAddress(const QString& value){ setProperty("RTSPProxyAddress", QVariant(value)); }

inline int VitaminCtrl::RTSPProxyPort() const
{
    QVariant qax_result = property("RTSPProxyPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetRTSPProxyPort(int value){ setProperty("RTSPProxyPort", QVariant(value)); }

inline bool VitaminCtrl::ReadSettingByParam() const
{
    QVariant qax_result = property("ReadSettingByParam");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetReadSettingByParam(bool value){ setProperty("ReadSettingByParam", QVariant(value)); }

inline int VitaminCtrl::ReadWriteTimeout() const
{
    QVariant qax_result = property("ReadWriteTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetReadWriteTimeout(int value){ setProperty("ReadWriteTimeout", QVariant(value)); }

inline QString VitaminCtrl::RecallURL() const
{
    QVariant qax_result = property("RecallURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetRecallURL(const QString& value){ setProperty("RecallURL", QVariant(value)); }

inline int VitaminCtrl::ReconnectionWait() const
{
    QVariant qax_result = property("ReconnectionWait");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetReconnectionWait(int value){ setProperty("ReconnectionWait", QVariant(value)); }

inline QString VitaminCtrl::RegSubKey() const
{
    QVariant qax_result = property("RegSubKey");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetRegSubKey(const QString& value){ setProperty("RegSubKey", QVariant(value)); }

inline VITAMINDECODERLib::ERegistryRoot VitaminCtrl::RegkeyRoot() const
{
    QVariant qax_result = property("RegkeyRoot");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::ERegistryRoot*)qax_result.constData();
}
inline void VitaminCtrl::SetRegkeyRoot(VITAMINDECODERLib::ERegistryRoot value){ setProperty("RegkeyRoot", QVariant(value)); }

inline QString VitaminCtrl::RemoteIDStr() const
{
    QVariant qax_result = property("RemoteIDStr");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetRemoteIDStr(const QString& value){ setProperty("RemoteIDStr", QVariant(value)); }

inline QString VitaminCtrl::RemoteIPAddr() const
{
    QVariant qax_result = property("RemoteIPAddr");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetRemoteIPAddr(const QString& value){ setProperty("RemoteIPAddr", QVariant(value)); }

inline int VitaminCtrl::RightTitleSpace() const
{
    QVariant qax_result = property("RightTitleSpace");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetRightTitleSpace(int value){ setProperty("RightTitleSpace", QVariant(value)); }

inline int VitaminCtrl::SVCTDecodeLevel() const
{
    QVariant qax_result = property("SVCTDecodeLevel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetSVCTDecodeLevel(int value){ setProperty("SVCTDecodeLevel", QVariant(value)); }

inline int VitaminCtrl::SVCTFrameInterval() const
{
    QVariant qax_result = property("SVCTFrameInterval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetSVCTFrameInterval(int value){ setProperty("SVCTFrameInterval", QVariant(value)); }

inline int VitaminCtrl::SVCTFrameLevel() const
{
    QVariant qax_result = property("SVCTFrameLevel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetSVCTFrameLevel(int value){ setProperty("SVCTFrameLevel", QVariant(value)); }

inline VITAMINDECODERLib::EServerModelType VitaminCtrl::ServerModelType() const
{
    QVariant qax_result = property("ServerModelType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EServerModelType*)qax_result.constData();
}
inline void VitaminCtrl::SetServerModelType(VITAMINDECODERLib::EServerModelType value){ setProperty("ServerModelType", QVariant(value)); }

inline QString VitaminCtrl::SetMD() const
{
    QVariant qax_result = property("SetMD");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetSetMD(const QString& value){ setProperty("SetMD", QVariant(value)); }

inline QString VitaminCtrl::SetMDParmUrl() const
{
    QVariant qax_result = property("SetMDParmUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetSetMDParmUrl(const QString& value){ setProperty("SetMDParmUrl", QVariant(value)); }

inline QString VitaminCtrl::SetMaskEditParmUrl() const
{
    QVariant qax_result = property("SetMaskEditParmUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetSetMaskEditParmUrl(const QString& value){ setProperty("SetMaskEditParmUrl", QVariant(value)); }

inline QString VitaminCtrl::SnapshotUrl() const
{
    QVariant qax_result = property("SnapshotUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int VitaminCtrl::StreamingBufferTime() const
{
    QVariant qax_result = property("StreamingBufferTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetStreamingBufferTime(int value){ setProperty("StreamingBufferTime", QVariant(value)); }

inline VITAMINDECODERLib::EStreamingOption VitaminCtrl::StreamingOption() const
{
    QVariant qax_result = property("StreamingOption");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EStreamingOption*)qax_result.constData();
}
inline void VitaminCtrl::SetStreamingOption(VITAMINDECODERLib::EStreamingOption value){ setProperty("StreamingOption", QVariant(value)); }

inline bool VitaminCtrl::Stretch() const
{
    QVariant qax_result = property("Stretch");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetStretch(bool value){ setProperty("Stretch", QVariant(value)); }

inline bool VitaminCtrl::StretchFullScreen() const
{
    QVariant qax_result = property("StretchFullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetStretchFullScreen(bool value){ setProperty("StretchFullScreen", QVariant(value)); }

inline VITAMINDECODERLib::ETalkBtnStyle VitaminCtrl::TalkButtonStyle() const
{
    QVariant qax_result = property("TalkButtonStyle");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::ETalkBtnStyle*)qax_result.constData();
}
inline void VitaminCtrl::SetTalkButtonStyle(VITAMINDECODERLib::ETalkBtnStyle value){ setProperty("TalkButtonStyle", QVariant(value)); }

inline QString VitaminCtrl::TextOnVideo() const
{
    QVariant qax_result = property("TextOnVideo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QColor VitaminCtrl::TitleBarColor() const
{
    QVariant qax_result = property("TitleBarColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void VitaminCtrl::SetTitleBarColor(const QColor& value){ setProperty("TitleBarColor", QVariant(value)); }

inline QColor VitaminCtrl::TitleTextColor() const
{
    QVariant qax_result = property("TitleTextColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void VitaminCtrl::SetTitleTextColor(const QColor& value){ setProperty("TitleTextColor", QVariant(value)); }

inline QString VitaminCtrl::UartURL() const
{
    QVariant qax_result = property("UartURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetUartURL(const QString& value){ setProperty("UartURL", QVariant(value)); }

inline int VitaminCtrl::UpdateJoystickInterval() const
{
    QVariant qax_result = property("UpdateJoystickInterval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VitaminCtrl::SetUpdateJoystickInterval(int value){ setProperty("UpdateJoystickInterval", QVariant(value)); }

inline QString VitaminCtrl::Url() const
{
    QVariant qax_result = property("Url");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetUrl(const QString& value){ setProperty("Url", QVariant(value)); }

inline QString VitaminCtrl::Url2() const
{
    QVariant qax_result = property("Url2");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetUrl2(const QString& value){ setProperty("Url2", QVariant(value)); }

inline bool VitaminCtrl::UserDateFormat() const
{
    QVariant qax_result = property("UserDateFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetUserDateFormat(bool value){ setProperty("UserDateFormat", QVariant(value)); }

inline QString VitaminCtrl::UserName() const
{
    QVariant qax_result = property("UserName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VitaminCtrl::SetUserName(const QString& value){ setProperty("UserName", QVariant(value)); }

inline int VitaminCtrl::VideoBitRate() const
{
    QVariant qax_result = property("VideoBitRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline VITAMINDECODERLib::EVideoQuality2K VitaminCtrl::VideoQuality2K() const
{
    QVariant qax_result = property("VideoQuality2K");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EVideoQuality2K*)qax_result.constData();
}
inline void VitaminCtrl::SetVideoQuality2K(VITAMINDECODERLib::EVideoQuality2K value){ setProperty("VideoQuality2K", QVariant(value)); }

inline VITAMINDECODERLib::EVideoSize2K VitaminCtrl::VideoSize2K() const
{
    QVariant qax_result = property("VideoSize2K");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EVideoSize2K*)qax_result.constData();
}
inline void VitaminCtrl::SetVideoSize2K(VITAMINDECODERLib::EVideoSize2K value){ setProperty("VideoSize2K", QVariant(value)); }

inline VITAMINDECODERLib::EDualStreamOption VitaminCtrl::ViewStream() const
{
    QVariant qax_result = property("ViewStream");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EDualStreamOption*)qax_result.constData();
}
inline void VitaminCtrl::SetViewStream(VITAMINDECODERLib::EDualStreamOption value){ setProperty("ViewStream", QVariant(value)); }

inline bool VitaminCtrl::WheelEventHandler() const
{
    QVariant qax_result = property("WheelEventHandler");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VitaminCtrl::SetWheelEventHandler(bool value){ setProperty("WheelEventHandler", QVariant(value)); }

inline int VitaminCtrl::ChooseAVIAudioCompressor(const QString& bstrDialogTitle)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrDialogTitle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline int VitaminCtrl::ChooseAVIVideoCompressor(const QString& bstrDialogTitle)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrDialogTitle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void VitaminCtrl::ClearAvSyncChannel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void VitaminCtrl::CloseConnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline int VitaminCtrl::Connect()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline int VitaminCtrl::DelPresetPosition(const QString& bstrPosition)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline void VitaminCtrl::Disconnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline int VitaminCtrl::DisplayStringOnVideo(const QString& strText, int lFontSize, VITAMINDECODERLib::EFontStyle EFontStyle, int lX, int lY, int lFontColorR, int lFontColorG, int lFontColorB, int lOutlineColorR, int lOutlineColorG, int lOutlineColorB)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strText, (void*)&lFontSize, (void*)&EFontStyle, (void*)&lX, (void*)&lY, (void*)&lFontColorR, (void*)&lFontColorG, (void*)&lFontColorB, (void*)&lOutlineColorR, (void*)&lOutlineColorG, (void*)&lOutlineColorB};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline QString VitaminCtrl::EnglishString(int lIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline int VitaminCtrl::FishEyeAddPresetInfoToList(int lX, int lY, int lZ, int lZFactor, int lScroll)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lX, (void*)&lY, (void*)&lZ, (void*)&lZFactor, (void*)&lScroll};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline int VitaminCtrl::FishEyeCtrl(VITAMINDECODERLib::EFishEyeControl eCtrlType, const QString& strCtrlMove, int lSpeed)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eCtrlType, (void*)&strCtrlMove, (void*)&lSpeed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline int VitaminCtrl::FishEyeGetPresetInfo()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline int VitaminCtrl::FishEyeGoPreset(int lX, int lY, int lZ, int lZFactor, int lScroll)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lX, (void*)&lY, (void*)&lZ, (void*)&lZFactor, (void*)&lScroll};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline int VitaminCtrl::FishEyeRegionAspectRatio(int lAspectRatioW, int lAspectRatioH)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lAspectRatioW, (void*)&lAspectRatioH};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline int VitaminCtrl::FishEyeRemovePresetInfoFromList(int lX, int lY, int lZ, int lZFactor, int lScroll)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lX, (void*)&lY, (void*)&lZ, (void*)&lZFactor, (void*)&lScroll};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline int VitaminCtrl::FishEyeResetPresetList()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline int VitaminCtrl::GetConnectionStatus(QVariant& pvData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline int VitaminCtrl::GetDigitalIn(int lPort, QVariant& plData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lPort, (void*)&plData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline int VitaminCtrl::GetPtzPresetPosition(QVariant& pvData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline int VitaminCtrl::GetSnapshot(VITAMINDECODERLib::EPictureFormat eFormat, QVariant& pvData, QVariant& pvInfo)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eFormat, (void*)&pvData, (void*)&pvInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline int VitaminCtrl::GetUartData(QVariant& pbstrData, int lReadLen)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pbstrData, (void*)&lReadLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline int VitaminCtrl::GetUartData(QVariant& pbstrData, int lReadLen, int lPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pbstrData, (void*)&lReadLen, (void*)&lPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline int VitaminCtrl::GetUartData(QVariant& pbstrData, int lReadLen, int lPort, int lTimeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pbstrData, (void*)&lReadLen, (void*)&lPort, (void*)&lTimeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline int VitaminCtrl::GetUartDataBinary(QVariant& pvData, int lReadLen)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData, (void*)&lReadLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline int VitaminCtrl::GetUartDataBinary(QVariant& pvData, int lReadLen, int lPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData, (void*)&lReadLen, (void*)&lPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline int VitaminCtrl::GetUartDataBinary(QVariant& pvData, int lReadLen, int lPort, int lTimeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData, (void*)&lReadLen, (void*)&lPort, (void*)&lTimeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline int VitaminCtrl::HttpCommand(const QString& strUrlCommand, bool bPost, bool bReadData, QVariant& strRetData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strUrlCommand, (void*)&bPost, (void*)&bReadData, (void*)&strRetData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline int VitaminCtrl::InputMediaPacket(int lLength, QVariant& pvPacket)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lLength, (void*)&pvPacket};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline int VitaminCtrl::InputMediaPacketX(int lLength, int lDataPtr)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lLength, (void*)&lDataPtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline void VitaminCtrl::OpenAudioRecorder()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline int VitaminCtrl::OpenDigitalZoomEditWnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
    return qax_result;
}

inline int VitaminCtrl::OpenMicVolumeEditWnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
    return qax_result;
}

inline int VitaminCtrl::OpenVolumeEditWnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline int VitaminCtrl::RecallPtzPosition(const QString& bstrPos)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline int VitaminCtrl::RefreshServerConfig()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline int VitaminCtrl::RepairDatabase(const QString& bstrDatabase)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrDatabase};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline int VitaminCtrl::RepairLocation(const QString& bstrLocation)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrLocation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline int VitaminCtrl::RestoreControlHandle()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline int VitaminCtrl::RtspPause()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline int VitaminCtrl::RtspPlay()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
    return qax_result;
}

inline int VitaminCtrl::RtspStop()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
    return qax_result;
}

inline int VitaminCtrl::SavePresetPosition(const QString& bstrPosition)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
    return qax_result;
}

inline int VitaminCtrl::SaveSendMail(VITAMINDECODERLib::EPictureFormat nType, const QString& bstrSendTo)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nType, (void*)&bstrSendTo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline int VitaminCtrl::SaveSnapshot(VITAMINDECODERLib::EPictureFormat eFormat, const QString& bstrFileName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eFormat, (void*)&bstrFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline int VitaminCtrl::SendCameraCommand(const QString& bstrCMD)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline int VitaminCtrl::SendCameraCommand(const QString& bstrCMD, int lTimeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD, (void*)&lTimeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
    return qax_result;
}

inline int VitaminCtrl::SendCameraCommandMap(int lX, int lY)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lX, (void*)&lY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline int VitaminCtrl::SendCameraControlSpeed(VITAMINDECODERLib::ESpeedType eType, int lSpeed)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eType, (void*)&lSpeed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
    return qax_result;
}

inline int VitaminCtrl::SendDigitalOut(int lPort, int lValue)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lPort, (void*)&lValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline int VitaminCtrl::SendUartCommand(const QString& bstrCMD)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
    return qax_result;
}

inline int VitaminCtrl::SendUartCommand(const QString& bstrCMD, bool bFlush)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD, (void*)&bFlush};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
    return qax_result;
}

inline int VitaminCtrl::SendUartCommand(const QString& bstrCMD, bool bFlush, int lPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD, (void*)&bFlush, (void*)&lPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
    return qax_result;
}

inline int VitaminCtrl::SendUartCommandBinary(const QVariant& vData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&vData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
    return qax_result;
}

inline int VitaminCtrl::SendUartCommandBinary(const QVariant& vData, bool bFlush)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&vData, (void*)&bFlush};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
    return qax_result;
}

inline int VitaminCtrl::SendUartCommandBinary(const QVariant& vData, bool bFlush, int lPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&vData, (void*)&bFlush, (void*)&lPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
    return qax_result;
}

inline QString VitaminCtrl::ServerConfig(int lCfgIndex, int lExtraIdx)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCfgIndex, (void*)&lExtraIdx};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
    return qax_result;
}

inline QString VitaminCtrl::ServerConfigEntry(int lCfgIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCfgIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
    return qax_result;
}

inline QString VitaminCtrl::ServerConfigSection(int lCfgIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCfgIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
    return qax_result;
}

inline int VitaminCtrl::SetBitmapHandle(int lBitmapHandle)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lBitmapHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
    return qax_result;
}

inline int VitaminCtrl::SetDatabasePath(const QString& newVal, bool bAutoCreate)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&newVal, (void*)&bAutoCreate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
    return qax_result;
}

inline int VitaminCtrl::SetFullScreen(bool bFullScreen)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bFullScreen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 185, _a);
    return qax_result;
}

inline int VitaminCtrl::SetGivenLangInfo(int lCodePage, int lFontSize, int lCharSet, bool bPitch, bool bSwiss, const QString& strFontName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCodePage, (void*)&lFontSize, (void*)&lCharSet, (void*)&bPitch, (void*)&bSwiss, (void*)&strFontName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 190, _a);
    return qax_result;
}

inline int VitaminCtrl::SetLangString(int lIndex, const QString& strUnicode)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lIndex, (void*)&strUnicode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 210, _a);
    return qax_result;
}

inline int VitaminCtrl::SetLangStringHex(int lIndex, const QString& strValue)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lIndex, (void*)&strValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 211, _a);
    return qax_result;
}

inline int VitaminCtrl::SetLocation(const QString& bstrLocation, bool bAutoCreate)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrLocation, (void*)&bAutoCreate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 214, _a);
    return qax_result;
}

inline int VitaminCtrl::SetServerConfig(int lCfgIndex, int lExtraIdx, const QString& bstrValue)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCfgIndex, (void*)&lExtraIdx, (void*)&bstrValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 259, _a);
    return qax_result;
}

inline int VitaminCtrl::SetServerDateTime(const QString& bstrDate, const QString& bstrTime)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrDate, (void*)&bstrTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 260, _a);
    return qax_result;
}

inline int VitaminCtrl::StartAVIConversion()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 282, _a);
    return qax_result;
}

inline int VitaminCtrl::StartMP4Conversion()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 283, _a);
    return qax_result;
}

inline int VitaminCtrl::StartMediaRecord(VITAMINDECODERLib::EMediaType EMediaType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&EMediaType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 284, _a);
    return qax_result;
}

inline int VitaminCtrl::StartMediaRecordEx(VITAMINDECODERLib::EMediaType EMediaType, bool bEventRecord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&EMediaType, (void*)&bEventRecord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 285, _a);
    return qax_result;
}

inline int VitaminCtrl::StartMicTalk()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 286, _a);
    return qax_result;
}

inline int VitaminCtrl::StartPacketInput(VITAMINDECODERLib::EMediaType EMediaType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&EMediaType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 287, _a);
    return qax_result;
}

inline int VitaminCtrl::StopAVIConversion()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 288, _a);
    return qax_result;
}

inline int VitaminCtrl::StopMP4Conversion()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 289, _a);
    return qax_result;
}

inline int VitaminCtrl::StopMediaRecord()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 290, _a);
    return qax_result;
}

inline int VitaminCtrl::StopMicTalk()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 291, _a);
    return qax_result;
}

inline int VitaminCtrl::StopPacketInput()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 292, _a);
    return qax_result;
}

inline int VitaminCtrl::UpdateServerConfig()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 293, _a);
    return qax_result;
}

inline void VitaminCtrl::hiddenFunction(VITAMINDECODERLib::EDBRecordEventType eEventType, VITAMINDECODERLib::EDBStatusCode eStatusCode, VITAMINDECODERLib::EPTZEnableFlag ePtz, VITAMINDECODERLib::EServerConfig eCfg, VITAMINDECODERLib::EAVIRecordState eRec, VITAMINDECODERLib::EControlButtonState eState)
{
    void *_a[] = {0, (void*)&eEventType, (void*)&eStatusCode, (void*)&ePtz, (void*)&eCfg, (void*)&eRec, (void*)&eState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 294, _a);
}


inline QString IVitaminCtrl::AVIFilePathName() const
{
    QVariant qax_result = property("AVIFilePathName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIFilePathName(const QString& value){ setProperty("AVIFilePathName", QVariant(value)); }

inline bool IVitaminCtrl::AVIManualNaming() const
{
    QVariant qax_result = property("AVIManualNaming");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIManualNaming(bool value){ setProperty("AVIManualNaming", QVariant(value)); }

inline int IVitaminCtrl::AVIMaxFileSize() const
{
    QVariant qax_result = property("AVIMaxFileSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIMaxFileSize(int value){ setProperty("AVIMaxFileSize", QVariant(value)); }

inline int IVitaminCtrl::AVIMaxFileTimeLength() const
{
    QVariant qax_result = property("AVIMaxFileTimeLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIMaxFileTimeLength(int value){ setProperty("AVIMaxFileTimeLength", QVariant(value)); }

inline QString IVitaminCtrl::AVIPath() const
{
    QVariant qax_result = property("AVIPath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIPath(const QString& value){ setProperty("AVIPath", QVariant(value)); }

inline int IVitaminCtrl::AVIRecordTimeout() const
{
    QVariant qax_result = property("AVIRecordTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIRecordTimeout(int value){ setProperty("AVIRecordTimeout", QVariant(value)); }

inline VITAMINDECODERLib::EAVIRecordState IVitaminCtrl::AVIStatus() const
{
    QVariant qax_result = property("AVIStatus");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EAVIRecordState*)qax_result.constData();
}

inline int IVitaminCtrl::AVIVideoFrameRate() const
{
    QVariant qax_result = property("AVIVideoFrameRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIVideoFrameRate(int value){ setProperty("AVIVideoFrameRate", QVariant(value)); }

inline int IVitaminCtrl::AVIVideoHeight() const
{
    QVariant qax_result = property("AVIVideoHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIVideoHeight(int value){ setProperty("AVIVideoHeight", QVariant(value)); }

inline bool IVitaminCtrl::AVIVideoSizeByStream() const
{
    QVariant qax_result = property("AVIVideoSizeByStream");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIVideoSizeByStream(bool value){ setProperty("AVIVideoSizeByStream", QVariant(value)); }

inline int IVitaminCtrl::AVIVideoWidth() const
{
    QVariant qax_result = property("AVIVideoWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetAVIVideoWidth(int value){ setProperty("AVIVideoWidth", QVariant(value)); }

inline bool IVitaminCtrl::AntiTearing() const
{
    QVariant qax_result = property("AntiTearing");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetAntiTearing(bool value){ setProperty("AntiTearing", QVariant(value)); }

inline int IVitaminCtrl::AudioBitRate() const
{
    QVariant qax_result = property("AudioBitRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IVitaminCtrl::AutoAVISettings() const
{
    QVariant qax_result = property("AutoAVISettings");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetAutoAVISettings(bool value){ setProperty("AutoAVISettings", QVariant(value)); }

inline bool IVitaminCtrl::AutoReconnect() const
{
    QVariant qax_result = property("AutoReconnect");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetAutoReconnect(bool value){ setProperty("AutoReconnect", QVariant(value)); }

inline bool IVitaminCtrl::AutoServerModelType() const
{
    QVariant qax_result = property("AutoServerModelType");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetAutoServerModelType(bool value){ setProperty("AutoServerModelType", QVariant(value)); }

inline bool IVitaminCtrl::AutoStartConnection() const
{
    QVariant qax_result = property("AutoStartConnection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetAutoStartConnection(bool value){ setProperty("AutoStartConnection", QVariant(value)); }

inline bool IVitaminCtrl::BeRightClickEventHandler() const
{
    QVariant qax_result = property("BeRightClickEventHandler");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetBeRightClickEventHandler(bool value){ setProperty("BeRightClickEventHandler", QVariant(value)); }

inline QString IVitaminCtrl::BitmapFile() const
{
    QVariant qax_result = property("BitmapFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetBitmapFile(const QString& value){ setProperty("BitmapFile", QVariant(value)); }

inline VITAMINDECODERLib::EFishEyePresentMode IVitaminCtrl::ChangePresentMode() const
{
    QVariant qax_result = property("ChangePresentMode");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EFishEyePresentMode*)qax_result.constData();
}
inline void IVitaminCtrl::SetChangePresentMode(VITAMINDECODERLib::EFishEyePresentMode value){ setProperty("ChangePresentMode", QVariant(value)); }

inline bool IVitaminCtrl::CircularMode() const
{
    QVariant qax_result = property("CircularMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetCircularMode(bool value){ setProperty("CircularMode", QVariant(value)); }

inline VITAMINDECODERLib::EClickEventHandler IVitaminCtrl::ClickEventHandler() const
{
    QVariant qax_result = property("ClickEventHandler");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EClickEventHandler*)qax_result.constData();
}
inline void IVitaminCtrl::SetClickEventHandler(VITAMINDECODERLib::EClickEventHandler value){ setProperty("ClickEventHandler", QVariant(value)); }

inline VITAMINDECODERLib::EConnProtocol IVitaminCtrl::ConnectionProtocol() const
{
    QVariant qax_result = property("ConnectionProtocol");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EConnProtocol*)qax_result.constData();
}
inline void IVitaminCtrl::SetConnectionProtocol(VITAMINDECODERLib::EConnProtocol value){ setProperty("ConnectionProtocol", QVariant(value)); }

inline int IVitaminCtrl::ConnectionTimeout() const
{
    QVariant qax_result = property("ConnectionTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetConnectionTimeout(int value){ setProperty("ConnectionTimeout", QVariant(value)); }

inline int IVitaminCtrl::ControlButtonOpts() const
{
    QVariant qax_result = property("ControlButtonOpts");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetControlButtonOpts(int value){ setProperty("ControlButtonOpts", QVariant(value)); }

inline int IVitaminCtrl::ControlID() const
{
    QVariant qax_result = property("ControlID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetControlID(int value){ setProperty("ControlID", QVariant(value)); }

inline int IVitaminCtrl::ControlPort() const
{
    QVariant qax_result = property("ControlPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetControlPort(int value){ setProperty("ControlPort", QVariant(value)); }

inline VITAMINDECODERLib::EControlStatus IVitaminCtrl::ControlStatus() const
{
    QVariant qax_result = property("ControlStatus");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EControlStatus*)qax_result.constData();
}

inline VITAMINDECODERLib::EControlType IVitaminCtrl::ControlType() const
{
    QVariant qax_result = property("ControlType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EControlType*)qax_result.constData();
}
inline void IVitaminCtrl::SetControlType(VITAMINDECODERLib::EControlType value){ setProperty("ControlType", QVariant(value)); }

inline QString IVitaminCtrl::ControlVersion() const
{
    QVariant qax_result = property("ControlVersion");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline VITAMINDECODERLib::EAudioCodecType IVitaminCtrl::CurrentAudioCodecType() const
{
    QVariant qax_result = property("CurrentAudioCodecType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EAudioCodecType*)qax_result.constData();
}

inline int IVitaminCtrl::CurrentAudioPort() const
{
    QVariant qax_result = property("CurrentAudioPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int IVitaminCtrl::CurrentControlCam() const
{
    QVariant qax_result = property("CurrentControlCam");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetCurrentControlCam(int value){ setProperty("CurrentControlCam", QVariant(value)); }

inline VITAMINDECODERLib::EMediaType IVitaminCtrl::CurrentMediaType() const
{
    QVariant qax_result = property("CurrentMediaType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EMediaType*)qax_result.constData();
}

inline VITAMINDECODERLib::EConnProtocol IVitaminCtrl::CurrentProtocol() const
{
    QVariant qax_result = property("CurrentProtocol");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EConnProtocol*)qax_result.constData();
}

inline VITAMINDECODERLib::EVideoCodecType IVitaminCtrl::CurrentVideoCodecType() const
{
    QVariant qax_result = property("CurrentVideoCodecType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EVideoCodecType*)qax_result.constData();
}

inline int IVitaminCtrl::CurrentVideoPort() const
{
    QVariant qax_result = property("CurrentVideoPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IVitaminCtrl::DBHierarchy() const
{
    QVariant qax_result = property("DBHierarchy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDBHierarchy(bool value){ setProperty("DBHierarchy", QVariant(value)); }

inline bool IVitaminCtrl::DDrawOnePass() const
{
    QVariant qax_result = property("DDrawOnePass");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDDrawOnePass(bool value){ setProperty("DDrawOnePass", QVariant(value)); }

inline bool IVitaminCtrl::DarwinConnection() const
{
    QVariant qax_result = property("DarwinConnection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDarwinConnection(bool value){ setProperty("DarwinConnection", QVariant(value)); }

inline QString IVitaminCtrl::DarwinExtraPath() const
{
    QVariant qax_result = property("DarwinExtraPath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetDarwinExtraPath(const QString& value){ setProperty("DarwinExtraPath", QVariant(value)); }

inline QString IVitaminCtrl::DatabasePath() const
{
    QVariant qax_result = property("DatabasePath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IVitaminCtrl::Deblocking() const
{
    QVariant qax_result = property("Deblocking");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDeblocking(bool value){ setProperty("Deblocking", QVariant(value)); }

inline bool IVitaminCtrl::DecodeAV() const
{
    QVariant qax_result = property("DecodeAV");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDecodeAV(bool value){ setProperty("DecodeAV", QVariant(value)); }

inline bool IVitaminCtrl::DecodeSnapshot() const
{
    QVariant qax_result = property("DecodeSnapshot");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDecodeSnapshot(bool value){ setProperty("DecodeSnapshot", QVariant(value)); }

inline bool IVitaminCtrl::Deinterlace() const
{
    QVariant qax_result = property("Deinterlace");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDeinterlace(bool value){ setProperty("Deinterlace", QVariant(value)); }

inline QString IVitaminCtrl::DigitalInURL() const
{
    QVariant qax_result = property("DigitalInURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetDigitalInURL(const QString& value){ setProperty("DigitalInURL", QVariant(value)); }

inline QString IVitaminCtrl::DigitalOutURL() const
{
    QVariant qax_result = property("DigitalOutURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetDigitalOutURL(const QString& value){ setProperty("DigitalOutURL", QVariant(value)); }

inline bool IVitaminCtrl::DigitalZoomEnableChk() const
{
    QVariant qax_result = property("DigitalZoomEnableChk");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDigitalZoomEnableChk(bool value){ setProperty("DigitalZoomEnableChk", QVariant(value)); }

inline bool IVitaminCtrl::DigitalZoomEnabled() const
{
    QVariant qax_result = property("DigitalZoomEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDigitalZoomEnabled(bool value){ setProperty("DigitalZoomEnabled", QVariant(value)); }

inline int IVitaminCtrl::DigitalZoomFactor() const
{
    QVariant qax_result = property("DigitalZoomFactor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetDigitalZoomFactor(int value){ setProperty("DigitalZoomFactor", QVariant(value)); }

inline int IVitaminCtrl::DigitalZoomX() const
{
    QVariant qax_result = property("DigitalZoomX");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetDigitalZoomX(int value){ setProperty("DigitalZoomX", QVariant(value)); }

inline int IVitaminCtrl::DigitalZoomY() const
{
    QVariant qax_result = property("DigitalZoomY");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetDigitalZoomY(int value){ setProperty("DigitalZoomY", QVariant(value)); }

inline bool IVitaminCtrl::Display() const
{
    QVariant qax_result = property("Display");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDisplay(bool value){ setProperty("Display", QVariant(value)); }

inline bool IVitaminCtrl::DisplayErrorMsg() const
{
    QVariant qax_result = property("DisplayErrorMsg");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDisplayErrorMsg(bool value){ setProperty("DisplayErrorMsg", QVariant(value)); }

inline bool IVitaminCtrl::DisplayLastImage() const
{
    QVariant qax_result = property("DisplayLastImage");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDisplayLastImage(bool value){ setProperty("DisplayLastImage", QVariant(value)); }

inline bool IVitaminCtrl::DisplayMotionFrame() const
{
    QVariant qax_result = property("DisplayMotionFrame");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetDisplayMotionFrame(bool value){ setProperty("DisplayMotionFrame", QVariant(value)); }

inline int IVitaminCtrl::DisplayPeriod() const
{
    QVariant qax_result = property("DisplayPeriod");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetDisplayPeriod(int value){ setProperty("DisplayPeriod", QVariant(value)); }

inline VITAMINDECODERLib::EDisplayTimeFormat IVitaminCtrl::DisplayTimeFormat() const
{
    QVariant qax_result = property("DisplayTimeFormat");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EDisplayTimeFormat*)qax_result.constData();
}
inline void IVitaminCtrl::SetDisplayTimeFormat(VITAMINDECODERLib::EDisplayTimeFormat value){ setProperty("DisplayTimeFormat", QVariant(value)); }

inline int IVitaminCtrl::DrawHwnd() const
{
    QVariant qax_result = property("DrawHwnd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetDrawHwnd(int value){ setProperty("DrawHwnd", QVariant(value)); }

inline VITAMINDECODERLib::EServerModelType IVitaminCtrl::EffectiveModelType() const
{
    QVariant qax_result = property("EffectiveModelType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EServerModelType*)qax_result.constData();
}

inline bool IVitaminCtrl::EnableFishEye() const
{
    QVariant qax_result = property("EnableFishEye");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetEnableFishEye(bool value){ setProperty("EnableFishEye", QVariant(value)); }

inline bool IVitaminCtrl::EnableJoystick() const
{
    QVariant qax_result = property("EnableJoystick");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetEnableJoystick(bool value){ setProperty("EnableJoystick", QVariant(value)); }

inline bool IVitaminCtrl::EnableMD() const
{
    QVariant qax_result = property("EnableMD");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetEnableMD(bool value){ setProperty("EnableMD", QVariant(value)); }

inline bool IVitaminCtrl::EnableMuteWhenTalk() const
{
    QVariant qax_result = property("EnableMuteWhenTalk");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetEnableMuteWhenTalk(bool value){ setProperty("EnableMuteWhenTalk", QVariant(value)); }

inline bool IVitaminCtrl::EnableRTSPProxy() const
{
    QVariant qax_result = property("EnableRTSPProxy");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetEnableRTSPProxy(bool value){ setProperty("EnableRTSPProxy", QVariant(value)); }

inline bool IVitaminCtrl::EnableRecordingTime() const
{
    QVariant qax_result = property("EnableRecordingTime");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetEnableRecordingTime(bool value){ setProperty("EnableRecordingTime", QVariant(value)); }

inline bool IVitaminCtrl::EnableSSL() const
{
    QVariant qax_result = property("EnableSSL");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetEnableSSL(bool value){ setProperty("EnableSSL", QVariant(value)); }

inline bool IVitaminCtrl::EnableTwoWayAudio() const
{
    QVariant qax_result = property("EnableTwoWayAudio");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetEnableTwoWayAudio(bool value){ setProperty("EnableTwoWayAudio", QVariant(value)); }

inline int IVitaminCtrl::EventTypes() const
{
    QVariant qax_result = property("EventTypes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetEventTypes(int value){ setProperty("EventTypes", QVariant(value)); }

inline bool IVitaminCtrl::FileNameOfTime() const
{
    QVariant qax_result = property("FileNameOfTime");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetFileNameOfTime(bool value){ setProperty("FileNameOfTime", QVariant(value)); }

inline int IVitaminCtrl::FishEyeAspectRatioHeight() const
{
    QVariant qax_result = property("FishEyeAspectRatioHeight");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetFishEyeAspectRatioHeight(int value){ setProperty("FishEyeAspectRatioHeight", QVariant(value)); }

inline int IVitaminCtrl::FishEyeAspectRatioWidth() const
{
    QVariant qax_result = property("FishEyeAspectRatioWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetFishEyeAspectRatioWidth(int value){ setProperty("FishEyeAspectRatioWidth", QVariant(value)); }

inline QString IVitaminCtrl::FishEyeInitLocationInfo() const
{
    QVariant qax_result = property("FishEyeInitLocationInfo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetFishEyeInitLocationInfo(const QString& value){ setProperty("FishEyeInitLocationInfo", QVariant(value)); }

inline VITAMINDECODERLib::EFishEyeMountType IVitaminCtrl::FishEyeMountType() const
{
    QVariant qax_result = property("FishEyeMountType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EFishEyeMountType*)qax_result.constData();
}
inline void IVitaminCtrl::SetFishEyeMountType(VITAMINDECODERLib::EFishEyeMountType value){ setProperty("FishEyeMountType", QVariant(value)); }

inline bool IVitaminCtrl::FlipMaskWnd() const
{
    QVariant qax_result = property("FlipMaskWnd");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetFlipMaskWnd(bool value){ setProperty("FlipMaskWnd", QVariant(value)); }

inline bool IVitaminCtrl::ForceGDI() const
{
    QVariant qax_result = property("ForceGDI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetForceGDI(bool value){ setProperty("ForceGDI", QVariant(value)); }

inline bool IVitaminCtrl::ForceNonYUV() const
{
    QVariant qax_result = property("ForceNonYUV");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetForceNonYUV(bool value){ setProperty("ForceNonYUV", QVariant(value)); }

inline int IVitaminCtrl::FrameRate() const
{
    QVariant qax_result = property("FrameRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IVitaminCtrl::GDIUseStretchBlt() const
{
    QVariant qax_result = property("GDIUseStretchBlt");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetGDIUseStretchBlt(bool value){ setProperty("GDIUseStretchBlt", QVariant(value)); }

inline QString IVitaminCtrl::GetMD() const
{
    QVariant qax_result = property("GetMD");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetGetMD(const QString& value){ setProperty("GetMD", QVariant(value)); }

inline QString IVitaminCtrl::GetMDParmUrl() const
{
    QVariant qax_result = property("GetMDParmUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetGetMDParmUrl(const QString& value){ setProperty("GetMDParmUrl", QVariant(value)); }

inline QString IVitaminCtrl::GetMaskEditParmUrl() const
{
    QVariant qax_result = property("GetMaskEditParmUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetGetMaskEditParmUrl(const QString& value){ setProperty("GetMaskEditParmUrl", QVariant(value)); }

inline QString IVitaminCtrl::HTTPProxyAddress() const
{
    QVariant qax_result = property("HTTPProxyAddress");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetHTTPProxyAddress(const QString& value){ setProperty("HTTPProxyAddress", QVariant(value)); }

inline QString IVitaminCtrl::HTTPProxyPassword() const
{
    QVariant qax_result = property("HTTPProxyPassword");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetHTTPProxyPassword(const QString& value){ setProperty("HTTPProxyPassword", QVariant(value)); }

inline int IVitaminCtrl::HTTPProxyPort() const
{
    QVariant qax_result = property("HTTPProxyPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetHTTPProxyPort(int value){ setProperty("HTTPProxyPort", QVariant(value)); }

inline VITAMINDECODERLib::EHttpProxyType IVitaminCtrl::HTTPProxyType() const
{
    QVariant qax_result = property("HTTPProxyType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EHttpProxyType*)qax_result.constData();
}
inline void IVitaminCtrl::SetHTTPProxyType(VITAMINDECODERLib::EHttpProxyType value){ setProperty("HTTPProxyType", QVariant(value)); }

inline QString IVitaminCtrl::HTTPProxyUserName() const
{
    QVariant qax_result = property("HTTPProxyUserName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetHTTPProxyUserName(const QString& value){ setProperty("HTTPProxyUserName", QVariant(value)); }

inline bool IVitaminCtrl::HideConnectIP() const
{
    QVariant qax_result = property("HideConnectIP");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetHideConnectIP(bool value){ setProperty("HideConnectIP", QVariant(value)); }

inline int IVitaminCtrl::HttpPort() const
{
    QVariant qax_result = property("HttpPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetHttpPort(int value){ setProperty("HttpPort", QVariant(value)); }

inline bool IVitaminCtrl::IgnoreBorder() const
{
    QVariant qax_result = property("IgnoreBorder");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetIgnoreBorder(bool value){ setProperty("IgnoreBorder", QVariant(value)); }

inline bool IVitaminCtrl::IgnoreCaption() const
{
    QVariant qax_result = property("IgnoreCaption");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetIgnoreCaption(bool value){ setProperty("IgnoreCaption", QVariant(value)); }

inline bool IVitaminCtrl::IgnoreSSLCertificate() const
{
    QVariant qax_result = property("IgnoreSSLCertificate");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetIgnoreSSLCertificate(bool value){ setProperty("IgnoreSSLCertificate", QVariant(value)); }

inline int IVitaminCtrl::IndexSize() const
{
    QVariant qax_result = property("IndexSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetIndexSize(int value){ setProperty("IndexSize", QVariant(value)); }

inline bool IVitaminCtrl::IsRecording() const
{
    QVariant qax_result = property("IsRecording");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int IVitaminCtrl::JoystickPanSpeedLvs() const
{
    QVariant qax_result = property("JoystickPanSpeedLvs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetJoystickPanSpeedLvs(int value){ setProperty("JoystickPanSpeedLvs", QVariant(value)); }

inline int IVitaminCtrl::JoystickSpeedLvs() const
{
    QVariant qax_result = property("JoystickSpeedLvs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetJoystickSpeedLvs(int value){ setProperty("JoystickSpeedLvs", QVariant(value)); }

inline int IVitaminCtrl::JoystickSpeedPercentage() const
{
    QVariant qax_result = property("JoystickSpeedPercentage");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetJoystickSpeedPercentage(int value){ setProperty("JoystickSpeedPercentage", QVariant(value)); }

inline int IVitaminCtrl::JoystickTiltSpeedLvs() const
{
    QVariant qax_result = property("JoystickTiltSpeedLvs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetJoystickTiltSpeedLvs(int value){ setProperty("JoystickTiltSpeedLvs", QVariant(value)); }

inline int IVitaminCtrl::JoystickZoomSpeedLvs() const
{
    QVariant qax_result = property("JoystickZoomSpeedLvs");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetJoystickZoomSpeedLvs(int value){ setProperty("JoystickZoomSpeedLvs", QVariant(value)); }

inline int IVitaminCtrl::JpegQuality() const
{
    QVariant qax_result = property("JpegQuality");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetJpegQuality(int value){ setProperty("JpegQuality", QVariant(value)); }

inline int IVitaminCtrl::JpegSecsPerFrame() const
{
    QVariant qax_result = property("JpegSecsPerFrame");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetJpegSecsPerFrame(int value){ setProperty("JpegSecsPerFrame", QVariant(value)); }

inline QString IVitaminCtrl::JpegURL() const
{
    QVariant qax_result = property("JpegURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetJpegURL(const QString& value){ setProperty("JpegURL", QVariant(value)); }

inline QString IVitaminCtrl::Language() const
{
    QVariant qax_result = property("Language");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetLanguage(const QString& value){ setProperty("Language", QVariant(value)); }

inline int IVitaminCtrl::LeftTitleSpace() const
{
    QVariant qax_result = property("LeftTitleSpace");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetLeftTitleSpace(int value){ setProperty("LeftTitleSpace", QVariant(value)); }

inline QString IVitaminCtrl::Location() const
{
    QVariant qax_result = property("Location");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IVitaminCtrl::MDEditMode() const
{
    QVariant qax_result = property("MDEditMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetMDEditMode(bool value){ setProperty("MDEditMode", QVariant(value)); }

inline bool IVitaminCtrl::MP4Conversion() const
{
    QVariant qax_result = property("MP4Conversion");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetMP4Conversion(bool value){ setProperty("MP4Conversion", QVariant(value)); }

inline int IVitaminCtrl::MP4MaxFileSize() const
{
    QVariant qax_result = property("MP4MaxFileSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetMP4MaxFileSize(int value){ setProperty("MP4MaxFileSize", QVariant(value)); }

inline int IVitaminCtrl::MP4MaxFileTime() const
{
    QVariant qax_result = property("MP4MaxFileTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetMP4MaxFileTime(int value){ setProperty("MP4MaxFileTime", QVariant(value)); }

inline QString IVitaminCtrl::MP4Path() const
{
    QVariant qax_result = property("MP4Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetMP4Path(const QString& value){ setProperty("MP4Path", QVariant(value)); }

inline QString IVitaminCtrl::MP4Prefix() const
{
    QVariant qax_result = property("MP4Prefix");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetMP4Prefix(const QString& value){ setProperty("MP4Prefix", QVariant(value)); }

inline VITAMINDECODERLib::EAVIRecordState IVitaminCtrl::MP4Status() const
{
    QVariant qax_result = property("MP4Status");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EAVIRecordState*)qax_result.constData();
}

inline int IVitaminCtrl::MaxDigitalZoomFactor() const
{
    QVariant qax_result = property("MaxDigitalZoomFactor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetMaxDigitalZoomFactor(int value){ setProperty("MaxDigitalZoomFactor", QVariant(value)); }

inline int IVitaminCtrl::MaxFileSize() const
{
    QVariant qax_result = property("MaxFileSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetMaxFileSize(int value){ setProperty("MaxFileSize", QVariant(value)); }

inline int IVitaminCtrl::MaxLocationSize() const
{
    QVariant qax_result = property("MaxLocationSize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetMaxLocationSize(int value){ setProperty("MaxLocationSize", QVariant(value)); }

inline int IVitaminCtrl::MaxReconnectionCount() const
{
    QVariant qax_result = property("MaxReconnectionCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetMaxReconnectionCount(int value){ setProperty("MaxReconnectionCount", QVariant(value)); }

inline bool IVitaminCtrl::MediaRecord() const
{
    QVariant qax_result = property("MediaRecord");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline VITAMINDECODERLib::EMediaType IVitaminCtrl::MediaType() const
{
    QVariant qax_result = property("MediaType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EMediaType*)qax_result.constData();
}
inline void IVitaminCtrl::SetMediaType(VITAMINDECODERLib::EMediaType value){ setProperty("MediaType", QVariant(value)); }

inline bool IVitaminCtrl::MicMute() const
{
    QVariant qax_result = property("MicMute");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetMicMute(bool value){ setProperty("MicMute", QVariant(value)); }

inline int IVitaminCtrl::MicVolume() const
{
    QVariant qax_result = property("MicVolume");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetMicVolume(int value){ setProperty("MicVolume", QVariant(value)); }

inline bool IVitaminCtrl::MirrorMaskaWnd() const
{
    QVariant qax_result = property("MirrorMaskaWnd");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetMirrorMaskaWnd(bool value){ setProperty("MirrorMaskaWnd", QVariant(value)); }

inline bool IVitaminCtrl::NamePassOption() const
{
    QVariant qax_result = property("NamePassOption");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetNamePassOption(bool value){ setProperty("NamePassOption", QVariant(value)); }

inline bool IVitaminCtrl::NotifyAudioPacket() const
{
    QVariant qax_result = property("NotifyAudioPacket");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetNotifyAudioPacket(bool value){ setProperty("NotifyAudioPacket", QVariant(value)); }

inline VITAMINDECODERLib::EPictureFormat IVitaminCtrl::NotifyImageFormat() const
{
    QVariant qax_result = property("NotifyImageFormat");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EPictureFormat*)qax_result.constData();
}
inline void IVitaminCtrl::SetNotifyImageFormat(VITAMINDECODERLib::EPictureFormat value){ setProperty("NotifyImageFormat", QVariant(value)); }

inline bool IVitaminCtrl::NotifyNewAudio() const
{
    QVariant qax_result = property("NotifyNewAudio");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetNotifyNewAudio(bool value){ setProperty("NotifyNewAudio", QVariant(value)); }

inline bool IVitaminCtrl::NotifyVideoData() const
{
    QVariant qax_result = property("NotifyVideoData");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetNotifyVideoData(bool value){ setProperty("NotifyVideoData", QVariant(value)); }

inline bool IVitaminCtrl::NotifyVideoPacket() const
{
    QVariant qax_result = property("NotifyVideoPacket");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetNotifyVideoPacket(bool value){ setProperty("NotifyVideoPacket", QVariant(value)); }

inline VITAMINDECODERLib::EPanelBtnStyle IVitaminCtrl::PanelButtonStyle() const
{
    QVariant qax_result = property("PanelButtonStyle");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EPanelBtnStyle*)qax_result.constData();
}
inline void IVitaminCtrl::SetPanelButtonStyle(VITAMINDECODERLib::EPanelBtnStyle value){ setProperty("PanelButtonStyle", QVariant(value)); }

inline bool IVitaminCtrl::ParseIPFromUrl() const
{
    QVariant qax_result = property("ParseIPFromUrl");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetParseIPFromUrl(bool value){ setProperty("ParseIPFromUrl", QVariant(value)); }

inline QString IVitaminCtrl::Password() const
{
    QVariant qax_result = property("Password");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetPassword(const QString& value){ setProperty("Password", QVariant(value)); }

inline bool IVitaminCtrl::PlayMute() const
{
    QVariant qax_result = property("PlayMute");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetPlayMute(bool value){ setProperty("PlayMute", QVariant(value)); }

inline int IVitaminCtrl::PlayVolume() const
{
    QVariant qax_result = property("PlayVolume");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetPlayVolume(int value){ setProperty("PlayVolume", QVariant(value)); }

inline int IVitaminCtrl::PostEventTime() const
{
    QVariant qax_result = property("PostEventTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetPostEventTime(int value){ setProperty("PostEventTime", QVariant(value)); }

inline int IVitaminCtrl::PreBufferMemorySize() const
{
    QVariant qax_result = property("PreBufferMemorySize");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetPreBufferMemorySize(int value){ setProperty("PreBufferMemorySize", QVariant(value)); }

inline int IVitaminCtrl::PreEventTime() const
{
    QVariant qax_result = property("PreEventTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetPreEventTime(int value){ setProperty("PreEventTime", QVariant(value)); }

inline QString IVitaminCtrl::PresetURL() const
{
    QVariant qax_result = property("PresetURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetPresetURL(const QString& value){ setProperty("PresetURL", QVariant(value)); }

inline QString IVitaminCtrl::PtzURL() const
{
    QVariant qax_result = property("PtzURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetPtzURL(const QString& value){ setProperty("PtzURL", QVariant(value)); }

inline QString IVitaminCtrl::RTSPProxyAddress() const
{
    QVariant qax_result = property("RTSPProxyAddress");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetRTSPProxyAddress(const QString& value){ setProperty("RTSPProxyAddress", QVariant(value)); }

inline int IVitaminCtrl::RTSPProxyPort() const
{
    QVariant qax_result = property("RTSPProxyPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetRTSPProxyPort(int value){ setProperty("RTSPProxyPort", QVariant(value)); }

inline bool IVitaminCtrl::ReadSettingByParam() const
{
    QVariant qax_result = property("ReadSettingByParam");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetReadSettingByParam(bool value){ setProperty("ReadSettingByParam", QVariant(value)); }

inline int IVitaminCtrl::ReadWriteTimeout() const
{
    QVariant qax_result = property("ReadWriteTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetReadWriteTimeout(int value){ setProperty("ReadWriteTimeout", QVariant(value)); }

inline QString IVitaminCtrl::RecallURL() const
{
    QVariant qax_result = property("RecallURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetRecallURL(const QString& value){ setProperty("RecallURL", QVariant(value)); }

inline int IVitaminCtrl::ReconnectionWait() const
{
    QVariant qax_result = property("ReconnectionWait");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetReconnectionWait(int value){ setProperty("ReconnectionWait", QVariant(value)); }

inline QString IVitaminCtrl::RegSubKey() const
{
    QVariant qax_result = property("RegSubKey");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetRegSubKey(const QString& value){ setProperty("RegSubKey", QVariant(value)); }

inline VITAMINDECODERLib::ERegistryRoot IVitaminCtrl::RegkeyRoot() const
{
    QVariant qax_result = property("RegkeyRoot");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::ERegistryRoot*)qax_result.constData();
}
inline void IVitaminCtrl::SetRegkeyRoot(VITAMINDECODERLib::ERegistryRoot value){ setProperty("RegkeyRoot", QVariant(value)); }

inline QString IVitaminCtrl::RemoteIDStr() const
{
    QVariant qax_result = property("RemoteIDStr");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetRemoteIDStr(const QString& value){ setProperty("RemoteIDStr", QVariant(value)); }

inline QString IVitaminCtrl::RemoteIPAddr() const
{
    QVariant qax_result = property("RemoteIPAddr");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetRemoteIPAddr(const QString& value){ setProperty("RemoteIPAddr", QVariant(value)); }

inline int IVitaminCtrl::RightTitleSpace() const
{
    QVariant qax_result = property("RightTitleSpace");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetRightTitleSpace(int value){ setProperty("RightTitleSpace", QVariant(value)); }

inline int IVitaminCtrl::SVCTDecodeLevel() const
{
    QVariant qax_result = property("SVCTDecodeLevel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetSVCTDecodeLevel(int value){ setProperty("SVCTDecodeLevel", QVariant(value)); }

inline int IVitaminCtrl::SVCTFrameInterval() const
{
    QVariant qax_result = property("SVCTFrameInterval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetSVCTFrameInterval(int value){ setProperty("SVCTFrameInterval", QVariant(value)); }

inline int IVitaminCtrl::SVCTFrameLevel() const
{
    QVariant qax_result = property("SVCTFrameLevel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetSVCTFrameLevel(int value){ setProperty("SVCTFrameLevel", QVariant(value)); }

inline VITAMINDECODERLib::EServerModelType IVitaminCtrl::ServerModelType() const
{
    QVariant qax_result = property("ServerModelType");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EServerModelType*)qax_result.constData();
}
inline void IVitaminCtrl::SetServerModelType(VITAMINDECODERLib::EServerModelType value){ setProperty("ServerModelType", QVariant(value)); }

inline QString IVitaminCtrl::SetMD() const
{
    QVariant qax_result = property("SetMD");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetSetMD(const QString& value){ setProperty("SetMD", QVariant(value)); }

inline QString IVitaminCtrl::SetMDParmUrl() const
{
    QVariant qax_result = property("SetMDParmUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetSetMDParmUrl(const QString& value){ setProperty("SetMDParmUrl", QVariant(value)); }

inline QString IVitaminCtrl::SetMaskEditParmUrl() const
{
    QVariant qax_result = property("SetMaskEditParmUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetSetMaskEditParmUrl(const QString& value){ setProperty("SetMaskEditParmUrl", QVariant(value)); }

inline QString IVitaminCtrl::SnapshotUrl() const
{
    QVariant qax_result = property("SnapshotUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IVitaminCtrl::StreamingBufferTime() const
{
    QVariant qax_result = property("StreamingBufferTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetStreamingBufferTime(int value){ setProperty("StreamingBufferTime", QVariant(value)); }

inline VITAMINDECODERLib::EStreamingOption IVitaminCtrl::StreamingOption() const
{
    QVariant qax_result = property("StreamingOption");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EStreamingOption*)qax_result.constData();
}
inline void IVitaminCtrl::SetStreamingOption(VITAMINDECODERLib::EStreamingOption value){ setProperty("StreamingOption", QVariant(value)); }

inline bool IVitaminCtrl::Stretch() const
{
    QVariant qax_result = property("Stretch");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetStretch(bool value){ setProperty("Stretch", QVariant(value)); }

inline bool IVitaminCtrl::StretchFullScreen() const
{
    QVariant qax_result = property("StretchFullScreen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetStretchFullScreen(bool value){ setProperty("StretchFullScreen", QVariant(value)); }

inline VITAMINDECODERLib::ETalkBtnStyle IVitaminCtrl::TalkButtonStyle() const
{
    QVariant qax_result = property("TalkButtonStyle");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::ETalkBtnStyle*)qax_result.constData();
}
inline void IVitaminCtrl::SetTalkButtonStyle(VITAMINDECODERLib::ETalkBtnStyle value){ setProperty("TalkButtonStyle", QVariant(value)); }

inline QString IVitaminCtrl::TextOnVideo() const
{
    QVariant qax_result = property("TextOnVideo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QColor IVitaminCtrl::TitleBarColor() const
{
    QVariant qax_result = property("TitleBarColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IVitaminCtrl::SetTitleBarColor(const QColor& value){ setProperty("TitleBarColor", QVariant(value)); }

inline QColor IVitaminCtrl::TitleTextColor() const
{
    QVariant qax_result = property("TitleTextColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void IVitaminCtrl::SetTitleTextColor(const QColor& value){ setProperty("TitleTextColor", QVariant(value)); }

inline QString IVitaminCtrl::UartURL() const
{
    QVariant qax_result = property("UartURL");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetUartURL(const QString& value){ setProperty("UartURL", QVariant(value)); }

inline int IVitaminCtrl::UpdateJoystickInterval() const
{
    QVariant qax_result = property("UpdateJoystickInterval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IVitaminCtrl::SetUpdateJoystickInterval(int value){ setProperty("UpdateJoystickInterval", QVariant(value)); }

inline QString IVitaminCtrl::Url() const
{
    QVariant qax_result = property("Url");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetUrl(const QString& value){ setProperty("Url", QVariant(value)); }

inline QString IVitaminCtrl::Url2() const
{
    QVariant qax_result = property("Url2");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetUrl2(const QString& value){ setProperty("Url2", QVariant(value)); }

inline bool IVitaminCtrl::UserDateFormat() const
{
    QVariant qax_result = property("UserDateFormat");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetUserDateFormat(bool value){ setProperty("UserDateFormat", QVariant(value)); }

inline QString IVitaminCtrl::UserName() const
{
    QVariant qax_result = property("UserName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVitaminCtrl::SetUserName(const QString& value){ setProperty("UserName", QVariant(value)); }

inline int IVitaminCtrl::VideoBitRate() const
{
    QVariant qax_result = property("VideoBitRate");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline VITAMINDECODERLib::EVideoQuality2K IVitaminCtrl::VideoQuality2K() const
{
    QVariant qax_result = property("VideoQuality2K");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EVideoQuality2K*)qax_result.constData();
}
inline void IVitaminCtrl::SetVideoQuality2K(VITAMINDECODERLib::EVideoQuality2K value){ setProperty("VideoQuality2K", QVariant(value)); }

inline VITAMINDECODERLib::EVideoSize2K IVitaminCtrl::VideoSize2K() const
{
    QVariant qax_result = property("VideoSize2K");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EVideoSize2K*)qax_result.constData();
}
inline void IVitaminCtrl::SetVideoSize2K(VITAMINDECODERLib::EVideoSize2K value){ setProperty("VideoSize2K", QVariant(value)); }

inline VITAMINDECODERLib::EDualStreamOption IVitaminCtrl::ViewStream() const
{
    QVariant qax_result = property("ViewStream");
    Q_ASSERT(qax_result.isValid());
    return *(VITAMINDECODERLib::EDualStreamOption*)qax_result.constData();
}
inline void IVitaminCtrl::SetViewStream(VITAMINDECODERLib::EDualStreamOption value){ setProperty("ViewStream", QVariant(value)); }

inline bool IVitaminCtrl::WheelEventHandler() const
{
    QVariant qax_result = property("WheelEventHandler");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IVitaminCtrl::SetWheelEventHandler(bool value){ setProperty("WheelEventHandler", QVariant(value)); }

inline int IVitaminCtrl::ChooseAVIAudioCompressor(const QString& bstrDialogTitle)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrDialogTitle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline int IVitaminCtrl::ChooseAVIVideoCompressor(const QString& bstrDialogTitle)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrDialogTitle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IVitaminCtrl::ClearAvSyncChannel()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IVitaminCtrl::CloseConnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline int IVitaminCtrl::Connect()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int IVitaminCtrl::DelPresetPosition(const QString& bstrPosition)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IVitaminCtrl::Disconnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline int IVitaminCtrl::DisplayStringOnVideo(const QString& strText, int lFontSize, VITAMINDECODERLib::EFontStyle EFontStyle, int lX, int lY, int lFontColorR, int lFontColorG, int lFontColorB, int lOutlineColorR, int lOutlineColorG, int lOutlineColorB)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strText, (void*)&lFontSize, (void*)&EFontStyle, (void*)&lX, (void*)&lY, (void*)&lFontColorR, (void*)&lFontColorG, (void*)&lFontColorB, (void*)&lOutlineColorR, (void*)&lOutlineColorG, (void*)&lOutlineColorB};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QString IVitaminCtrl::EnglishString(int lIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline int IVitaminCtrl::FishEyeAddPresetInfoToList(int lX, int lY, int lZ, int lZFactor, int lScroll)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lX, (void*)&lY, (void*)&lZ, (void*)&lZFactor, (void*)&lScroll};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IVitaminCtrl::FishEyeCtrl(VITAMINDECODERLib::EFishEyeControl eCtrlType, const QString& strCtrlMove, int lSpeed)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eCtrlType, (void*)&strCtrlMove, (void*)&lSpeed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline int IVitaminCtrl::FishEyeGetPresetInfo()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline int IVitaminCtrl::FishEyeGoPreset(int lX, int lY, int lZ, int lZFactor, int lScroll)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lX, (void*)&lY, (void*)&lZ, (void*)&lZFactor, (void*)&lScroll};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline int IVitaminCtrl::FishEyeRegionAspectRatio(int lAspectRatioW, int lAspectRatioH)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lAspectRatioW, (void*)&lAspectRatioH};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline int IVitaminCtrl::FishEyeRemovePresetInfoFromList(int lX, int lY, int lZ, int lZFactor, int lScroll)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lX, (void*)&lY, (void*)&lZ, (void*)&lZFactor, (void*)&lScroll};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IVitaminCtrl::FishEyeResetPresetList()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetConnectionStatus(QVariant& pvData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetDigitalIn(int lPort, QVariant& plData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lPort, (void*)&plData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetPtzPresetPosition(QVariant& pvData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetSnapshot(VITAMINDECODERLib::EPictureFormat eFormat, QVariant& pvData, QVariant& pvInfo)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eFormat, (void*)&pvData, (void*)&pvInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetUartData(QVariant& pbstrData, int lReadLen)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pbstrData, (void*)&lReadLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetUartData(QVariant& pbstrData, int lReadLen, int lPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pbstrData, (void*)&lReadLen, (void*)&lPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetUartData(QVariant& pbstrData, int lReadLen, int lPort, int lTimeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pbstrData, (void*)&lReadLen, (void*)&lPort, (void*)&lTimeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetUartDataBinary(QVariant& pvData, int lReadLen)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData, (void*)&lReadLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetUartDataBinary(QVariant& pvData, int lReadLen, int lPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData, (void*)&lReadLen, (void*)&lPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline int IVitaminCtrl::GetUartDataBinary(QVariant& pvData, int lReadLen, int lPort, int lTimeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pvData, (void*)&lReadLen, (void*)&lPort, (void*)&lTimeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline int IVitaminCtrl::HttpCommand(const QString& strUrlCommand, bool bPost, bool bReadData, QVariant& strRetData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strUrlCommand, (void*)&bPost, (void*)&bReadData, (void*)&strRetData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline int IVitaminCtrl::InputMediaPacket(int lLength, QVariant& pvPacket)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lLength, (void*)&pvPacket};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline int IVitaminCtrl::InputMediaPacketX(int lLength, int lDataPtr)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lLength, (void*)&lDataPtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline void IVitaminCtrl::OpenAudioRecorder()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline int IVitaminCtrl::OpenDigitalZoomEditWnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline int IVitaminCtrl::OpenMicVolumeEditWnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline int IVitaminCtrl::OpenVolumeEditWnd()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline int IVitaminCtrl::RecallPtzPosition(const QString& bstrPos)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline int IVitaminCtrl::RefreshServerConfig()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline int IVitaminCtrl::RepairDatabase(const QString& bstrDatabase)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrDatabase};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline int IVitaminCtrl::RepairLocation(const QString& bstrLocation)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrLocation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline int IVitaminCtrl::RestoreControlHandle()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline int IVitaminCtrl::RtspPause()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline int IVitaminCtrl::RtspPlay()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline int IVitaminCtrl::RtspStop()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline int IVitaminCtrl::SavePresetPosition(const QString& bstrPosition)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline int IVitaminCtrl::SaveSendMail(VITAMINDECODERLib::EPictureFormat nType, const QString& bstrSendTo)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&nType, (void*)&bstrSendTo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int IVitaminCtrl::SaveSnapshot(VITAMINDECODERLib::EPictureFormat eFormat, const QString& bstrFileName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eFormat, (void*)&bstrFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendCameraCommand(const QString& bstrCMD)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendCameraCommand(const QString& bstrCMD, int lTimeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD, (void*)&lTimeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendCameraCommandMap(int lX, int lY)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lX, (void*)&lY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendCameraControlSpeed(VITAMINDECODERLib::ESpeedType eType, int lSpeed)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eType, (void*)&lSpeed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendDigitalOut(int lPort, int lValue)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lPort, (void*)&lValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendUartCommand(const QString& bstrCMD)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendUartCommand(const QString& bstrCMD, bool bFlush)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD, (void*)&bFlush};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendUartCommand(const QString& bstrCMD, bool bFlush, int lPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrCMD, (void*)&bFlush, (void*)&lPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendUartCommandBinary(const QVariant& vData)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&vData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendUartCommandBinary(const QVariant& vData, bool bFlush)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&vData, (void*)&bFlush};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline int IVitaminCtrl::SendUartCommandBinary(const QVariant& vData, bool bFlush, int lPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&vData, (void*)&bFlush, (void*)&lPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline QString IVitaminCtrl::ServerConfig(int lCfgIndex, int lExtraIdx)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCfgIndex, (void*)&lExtraIdx};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline QString IVitaminCtrl::ServerConfigEntry(int lCfgIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCfgIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline QString IVitaminCtrl::ServerConfigSection(int lCfgIndex)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCfgIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline int IVitaminCtrl::SetBitmapHandle(int lBitmapHandle)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lBitmapHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline int IVitaminCtrl::SetDatabasePath(const QString& newVal, bool bAutoCreate)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&newVal, (void*)&bAutoCreate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
    return qax_result;
}

inline int IVitaminCtrl::SetFullScreen(bool bFullScreen)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bFullScreen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
    return qax_result;
}

inline int IVitaminCtrl::SetGivenLangInfo(int lCodePage, int lFontSize, int lCharSet, bool bPitch, bool bSwiss, const QString& strFontName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCodePage, (void*)&lFontSize, (void*)&lCharSet, (void*)&bPitch, (void*)&bSwiss, (void*)&strFontName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
    return qax_result;
}

inline int IVitaminCtrl::SetLangString(int lIndex, const QString& strUnicode)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lIndex, (void*)&strUnicode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
    return qax_result;
}

inline int IVitaminCtrl::SetLangStringHex(int lIndex, const QString& strValue)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lIndex, (void*)&strValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
    return qax_result;
}

inline int IVitaminCtrl::SetLocation(const QString& bstrLocation, bool bAutoCreate)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrLocation, (void*)&bAutoCreate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
    return qax_result;
}

inline int IVitaminCtrl::SetServerConfig(int lCfgIndex, int lExtraIdx, const QString& bstrValue)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lCfgIndex, (void*)&lExtraIdx, (void*)&bstrValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 208, _a);
    return qax_result;
}

inline int IVitaminCtrl::SetServerDateTime(const QString& bstrDate, const QString& bstrTime)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bstrDate, (void*)&bstrTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 209, _a);
    return qax_result;
}

inline int IVitaminCtrl::StartAVIConversion()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 231, _a);
    return qax_result;
}

inline int IVitaminCtrl::StartMP4Conversion()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 232, _a);
    return qax_result;
}

inline int IVitaminCtrl::StartMediaRecord(VITAMINDECODERLib::EMediaType EMediaType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&EMediaType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 233, _a);
    return qax_result;
}

inline int IVitaminCtrl::StartMediaRecordEx(VITAMINDECODERLib::EMediaType EMediaType, bool bEventRecord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&EMediaType, (void*)&bEventRecord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 234, _a);
    return qax_result;
}

inline int IVitaminCtrl::StartMicTalk()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 235, _a);
    return qax_result;
}

inline int IVitaminCtrl::StartPacketInput(VITAMINDECODERLib::EMediaType EMediaType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&EMediaType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 236, _a);
    return qax_result;
}

inline int IVitaminCtrl::StopAVIConversion()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 237, _a);
    return qax_result;
}

inline int IVitaminCtrl::StopMP4Conversion()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 238, _a);
    return qax_result;
}

inline int IVitaminCtrl::StopMediaRecord()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 239, _a);
    return qax_result;
}

inline int IVitaminCtrl::StopMicTalk()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 240, _a);
    return qax_result;
}

inline int IVitaminCtrl::StopPacketInput()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 241, _a);
    return qax_result;
}

inline int IVitaminCtrl::UpdateServerConfig()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 242, _a);
    return qax_result;
}

inline void IVitaminCtrl::hiddenFunction(VITAMINDECODERLib::EDBRecordEventType eEventType, VITAMINDECODERLib::EDBStatusCode eStatusCode, VITAMINDECODERLib::EPTZEnableFlag ePtz, VITAMINDECODERLib::EServerConfig eCfg, VITAMINDECODERLib::EAVIRecordState eRec, VITAMINDECODERLib::EControlButtonState eState)
{
    void *_a[] = {0, (void*)&eEventType, (void*)&eStatusCode, (void*)&ePtz, (void*)&eCfg, (void*)&eRec, (void*)&eState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 243, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<VITAMINDECODERLib::VitaminCtrl, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<VITAMINDECODERLib::VitaminCtrl*>(t)->VITAMINDECODERLib::VitaminCtrl::~VitaminCtrl();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) VITAMINDECODERLib::VitaminCtrl;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const VITAMINDECODERLib::VitaminCtrl*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<VITAMINDECODERLib::VitaminCtrl*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<VITAMINDECODERLib::IVitaminCtrl, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<VITAMINDECODERLib::IVitaminCtrl*>(t)->VITAMINDECODERLib::IVitaminCtrl::~IVitaminCtrl();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) VITAMINDECODERLib::IVitaminCtrl;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const VITAMINDECODERLib::IVitaminCtrl*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<VITAMINDECODERLib::IVitaminCtrl*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

